import sys
import winrm
from winrm.protocol import Protocol
from winrm.exceptions import *
import xml.etree.ElementTree as ET
from Util.writeHelper import *

winrm_port = 5985

# security_link = 'http://www.microsoft.com/GroupPolicy/Settings/Security'
# auditting_link = 'http://www.microsoft.com/GroupPolicy/Settings/Auditing'

extension_link = '{http://www.microsoft.com/GroupPolicy/Settings}Extension'

links = ['{http://www.microsoft.com/GroupPolicy/Settings/Security}', '{http://www.microsoft.com/GroupPolicy/Settings/Auditing}', '{http://www.microsoft.com/GroupPolicy/Types}']

tag_define = [
    '{http://www.microsoft.com/GroupPolicy/Settings/Security}Account', 
    '{http://www.microsoft.com/GroupPolicy/Settings/Security}SecurityOptions', 
    '{http://www.microsoft.com/GroupPolicy/Settings/Auditing}AuditSetting', 
    '{http://www.microsoft.com/GroupPolicy/Settings/Security}Audit',
    '{http://www.microsoft.com/GroupPolicy/Settings/Security}UserRightsAssignment'
]

tag_define_dict = {
    "{http://www.microsoft.com/GroupPolicy/Settings/Security}Account": "Name",
    "{http://www.microsoft.com/GroupPolicy/Settings/Security}SecurityOptions": ["Name", "SystemAccessPolicyName"],
    "{http://www.microsoft.com/GroupPolicy/Settings/Auditing}AuditSetting": "SubcategoryName",
    "{http://www.microsoft.com/GroupPolicy/Settings/Security}Audit": "Name",
    "{http://www.microsoft.com/GroupPolicy/Settings/Security}UserRightsAssignment" : "Name"
}

# xml_tags = ['Name', 'SubcategoryName', 'SystemAccessPolicyName']

link_dict = {
    # pasword
    "ClearTextPassword": "SettingBoolean",
    "MaximumPasswordAge": "SettingNumber",
    "MinimumPasswordAge": "SettingNumber",
    "MinimumPasswordLength": "SettingNumber",
    "PasswordComplexity": "SettingBoolean",
    "PasswordHistorySize": "SettingNumber",
    "Relax minimum password length limits": "DisplayBoolean",
    
    # login logon logoff
    "AuditAccountLogon": ["SuccessAttempts", "FailureAttempts"],
    "AuditLogonEvents": ["SuccessAttempts", "FailureAttempts"],
    
    # file share
    "Audit File Share": "SettingValue",
    
    # login logon logoff
    "Audit Credential Validation": "SettingValue",
    "Audit Other Account Logon Events": "SettingValue",
    "Audit Logoff": "SettingValue",
    "Audit Logon": "SettingValue",
    "Audit Other Logon/Logoff Events": "SettingValue",
    "Audit Special Logon": "SettingValue",
    
    # lockout
    "LockoutBadCount": "SettingNumber",
    "LockoutDuration": "SettingNumber",
    "ResetLockoutCount": "SettingNumber",
    
    # kerberos
    "MaxClockSkew": "SettingNumber",
    "MaxRenewAge": "SettingNumber",
    "MaxServiceAge": "SettingNumber",
    "MaxTicketAge": "SettingNumber",
    "TicketValidateClient": "SettingBoolean",
    "Audit Kerberos Authentication Service": "SettingValue",
    "Audit Kerberos Service Ticket Operations": "SettingValue",
    
    # network
    "Network security: Do not store LAN Manager hash value on next password change": "DisplayBoolean",
    
    # user right
    "ForceLogoffWhenHourExpire": "SettingNumber",
    "LSAAnonymousNameLookup": "SettingNumber",
    "SeInteractiveLogonRight": "Member",
    "SeNetworkLogonRight": "Member",
    "SeRemoteInteractiveLogonRight": "Member"
}

attribute_dict = {
    "Member": "Name"
}

# security_link_dict = {
#     #pasword
#     "MinimumPasswordLength": "SettingNumber",
#     "PasswordComplexity": "SettingBoolean",
#     "PasswordHistorySize": "SettingNumber",
#     "Relax minimum password length limits": "DisplayBoolean",
#     #login logon logoff
#     "AuditAccountLogon": ["SuccessAttempts", "FailureAttempts"],
#     "AuditLogonEvents": ["SuccessAttempts", "FailureAttempts"]
# }

# auditting_link_dict = {
#     #file share
#     "Audit File Share": "SettingValue",
#     #login logon logoff
#     "Audit Credential Validation": "SettingValue",
#     "Audit Other Account Logon Events": "SettingValue",
#     "Audit Logoff": "SettingValue",
#     "Audit Logon": "SettingValue",
#     "Audit Other Logon/Logoff Events": "SettingValue",
#     "Audit Special Logon": "SettingValue",
#     #kerberos
#     "Audit Kerberos Authentication Service": "SettingValue",
#     "Audit Kerberos Service Ticket Operations": "SettingValue"
# }


# pasword_policy_dict = {
#     "MinimumPasswordLength": "SettingNumber",
#     "PasswordComplexity": "SettingBoolean",
#     "PasswordHistorySize": "SettingNumber",
#     "MACHINE\\System\\CurrentControlSet\\Control\\SAM\\RelaxMinimumPasswordLengthLimits": "SettingNumber" 
# }
        
# file_share_audit_dict = {
#     "Audit File Share": "SettingValue"
# }
        
# kerberos_audit_dict = {
#     "Audit Kerberos Authentication Service": "SettingValue",
#     "Audit Kerberos Service Ticket Operations": "SettingValue"
# }

# login_logon_logoff_audit_dict = {
#     "AuditAccountLogon": ["SuccessAttempts", "FailureAttempts"],
#     "AuditLogonEvents": ["SuccessAttempts", "FailureAttempts"],
#     "Audit Credential Validation": "SettingValue",
#     "Audit Other Account Logon Events": "SettingValue",
#     "Audit Logoff": "SettingValue",
#     "Audit Logon": "SettingValue",
#     "Audit Other Logon/Logoff Events": "SettingValue",
#     "Audit Special Logon": "SettingValue",
# }

class PsSession(object):
    def __init__(self, ip='', username='', password='', domain=''):
        if ip:
            self.ip = ip
        else:
            self.get_ip_from_hostname(domain)
        self.username = username
        self.password = password
        self.domain = domain
        
        self.conn = self.connection_init()
        
    def connection_init(self):
        session = winrm.Session(self.ip, auth=(self.username, self.password))
        return session
    
    def close_session(self):
        self.conn = None
    
    def runPsCommand(self, command):
        result = self.conn.run_ps(command).std_out.decode()
        # print(result)
        return result
    
    def parse_GPO_attribute(self, setting, link, tag_define_dict_value, result, find_result):
        find_tag = setting.find('.//' + link + tag_define_dict_value)
        if find_tag is not None:
            name_value = find_tag.text
            # print(name_value, end = ': ')
            if name_value in link_dict:                        
                if type(link_dict[name_value]) is list:
                    value_1_tag = setting.find('.//' + link + link_dict[name_value][0]).tag
                    value_2_tag = setting.find('.//' + link + link_dict[name_value][1]).tag
                    value_1 = setting.find('.//' + link + link_dict[name_value][0]).text
                    value_2 = setting.find('.//' + link + link_dict[name_value][1]).text
                    for link_1 in links:
                        value_1_tag_after = value_1_tag.replace(link_1, '')
                        value_2_tag_after = value_2_tag.replace(link_1, '')
                        if value_1_tag_after!=value_1_tag and value_2_tag_after!=value_2_tag:
                            result.append([name_value, value_1_tag_after + ' (' + value_1 + ')', value_2_tag_after + ' (' + value_2 + ')'])
                                        # print(value_1, value_2)
                else:    
                    search = setting.find('.//' + link + link_dict[name_value])
                    value = search.text
                    if link_dict[name_value]=='Member':
                        find = setting.findall('.//' + links[2] + attribute_dict[link_dict[name_value]])
                        if find is not None:
                            for attri in find:
                                # print(attri.text)
                                if attri.text!='':
                                    if attri is not None and attri.text not in link_dict:
                                        find_result.append(attri.text)
                            attr = search.tag
                            attr_split = attr.replace(link, '')
                            # print(find_result)
                            if attr_split!=attr:
                                # find_result.append()
                                result.append([name_value, attr_split + ': ' + str(find_result).replace("'", '').replace('[', '').replace(']', '').strip(), 'None'])
                                check = False
                                # print(str(find_result))
                                find_result = []
                                # print(attr_split)
                                # print(attr)
                    if link_dict[name_value]=='SettingValue':
                        if value=='1':
                            result.append([name_value, 'Audit Success', 'None'])
                        elif value=='2':
                            result.append([name_value, 'Audit Failure', 'None'])
                        elif value=='3':
                            result.append([name_value, 'Audit Success and Failure', 'None'])
                            # print(value)
                        else:
                            result.append([name_value, value, 'None'])
        print(result)
        return result
    
    def parseXML(self, xmlFile):
        # Extract GPO settings
        root = ET.fromstring(xmlFile)
        extension_tag = root.iter(extension_link)
        result = []
        find_result = []

            # Check if the Extension tag is found
        if extension_tag is not None:
            # Extract data within Extension tag
            for child in extension_tag:
                # print(child.tag, child.text)
                for setting in child:
                    for link in links:
                        if setting.tag in tag_define: 
                            if type(tag_define_dict[setting.tag]) is list:
                                for ele in tag_define_dict[setting.tag]:
                                    find_tag = setting.find('.//' + link + ele)
                                    if find_tag is not None:   
                                        name_value = find_tag.text
                                        # print(name_value, end = ': ')  
                                        if type(link_dict[name_value]) is list:
                                            value_1_tag = setting.find('.//' + link + link_dict[name_value][0]).tag
                                            value_2_tag = setting.find('.//' + link + link_dict[name_value][1]).tag
                                            value_1 = setting.find('.//' + link + link_dict[name_value][0]).text
                                            value_2 = setting.find('.//' + link + link_dict[name_value][1]).text
                                            for link_1 in links:
                                                value_1_tag_after = value_1_tag.replace(link_1, '')
                                                value_2_tag_after = value_2_tag.replace(link_1, '')
                                                if value_1_tag_after!=value_1_tag and value_2_tag_after!=value_2_tag:
                                                    result.append([name_value, value_1_tag_after + ' (' + value_1 + ')', value_2_tag_after + ' (' + value_2 + ')'])
                                        # print(value_1, value_2)
                                        else:    
                                            value = setting.find('.//' + link + link_dict[name_value]).text
                                            if link_dict[name_value]=='SettingValue':
                                                if value=='1':
                                                    result.append([name_value, 'Audit Success', 'None'])
                                                elif value=='2':
                                                    result.append([name_value, 'Audit Failure', 'None'])
                                                elif value=='3':
                                                    result.append([name_value, 'Audit Success and Failure', 'None'])
                                            # print(value)
                                            else:
                                                result.append([name_value, value, 'None'])
                            else:
                                find_tag = setting.find('.//' + link + tag_define_dict[setting.tag])            
                                if find_tag is not None:          
                                    name_value = find_tag.text
                                    # print(name_value, end = ': ')
                                    if name_value in link_dict:
                                        if type(link_dict[name_value]) is list:
                                            value_1_tag = setting.find('.//' + link + link_dict[name_value][0]).tag
                                            value_2_tag = setting.find('.//' + link + link_dict[name_value][1]).tag
                                            value_1 = setting.find('.//' + link + link_dict[name_value][0]).text
                                            value_2 = setting.find('.//' + link + link_dict[name_value][1]).text
                                            for link_1 in links:
                                                value_1_tag_after = value_1_tag.replace(link_1, '')
                                                value_2_tag_after = value_2_tag.replace(link_1, '')
                                                if value_1_tag_after!=value_1_tag and value_2_tag_after!=value_2_tag:
                                                    result.append([name_value, value_1_tag_after + ' (' + value_1 + ')', value_2_tag_after + ' (' + value_2 + ')'])
                                                # print(value_1, value_2)
                                        else:    
                                            search = setting.find('.//' + link + link_dict[name_value])
                                            value = search.text
                                            if link_dict[name_value]=='Member':
                                                find = setting.findall('.//' + links[2] + attribute_dict[link_dict[name_value]])
                                                if find is not None:
                                                    for attri in find:
                                                        # print(attri.text)
                                                        if attri.text!='':
                                                            if attri is not None and attri.text not in link_dict:
                                                                find_result.append(attri.text)
                                                    attr = search.tag
                                                    attr_split = attr.replace(link, '')
                                                    # print(find_result)
                                                    if attr_split!=attr:
                                                        # find_result.append()
                                                        result.append([name_value, attr_split + ': ' + str(find_result).replace("'", '').replace('[', '').replace(']', '').strip(), 'None'])
                                                        check = False
                                                        # print(str(find_result))
                                                        find_result = []
                                                        # print(attr_split)
                                                        # print(attr)
                                            if link_dict[name_value]=='SettingValue':
                                                if value=='1':
                                                    result.append([name_value, 'Audit Success', 'None'])
                                                elif value=='2':
                                                    result.append([name_value, 'Audit Failure', 'None'])
                                                elif value=='3':
                                                    result.append([name_value, 'Audit Success and Failure', 'None'])
                                            # print(value)
                                            else:
                                                result.append([name_value, value, 'None'])  
                                # res = self.parse_GPO_attribute(setting, link, tag_define_dict[setting.tag], result, find_result)  
                                # result.append(res)   
        # print(result)                       
        if len(result) > 0:
            # xóa các element chứ attribute \n
            result = [elem for elem in result if not any('\n' in item for item in elem)]
            printTable(result, header=['Name', 'Attribute', 'Extra Attribute'])
            # else:
            #     print("Extension tag not found in the XML data.")
        
        # for child in root.iter('{http://www.microsoft.com/GroupPolicy/Settings}Extension'):
        #     for setting in child:
        #         print(setting.find('.//{http://www.microsoft.com/GroupPolicy/Settings/Security}Name'))
        #         print(child.tag, child.text)
        # extension_data = root.find('.//ExtensionData')
        # print(extension_data)

        # for extensionData in root.iter('GPO'):
        #     print(extensionData)
        # # for neighbor in root.iter('neighbor'):
        # #     print(neighbor.attrib)
