import sys
import winrm
from winrm.protocol import Protocol
from winrm.exceptions import *
import xml.etree.ElementTree as ET
from Util.writeHelper import *
from colorama import Fore, Style

winrm_port = 5985

# security_link = 'http://www.microsoft.com/GroupPolicy/Settings/Security'
# auditting_link = 'http://www.microsoft.com/GroupPolicy/Settings/Auditing'

extension_link = '{http://www.microsoft.com/GroupPolicy/Settings}Extension'

links = ['{http://www.microsoft.com/GroupPolicy/Settings/Security}', '{http://www.microsoft.com/GroupPolicy/Settings/Auditing}', '{http://www.microsoft.com/GroupPolicy/Types}']

tag_define = [
    '{http://www.microsoft.com/GroupPolicy/Settings/Security}Account', 
    '{http://www.microsoft.com/GroupPolicy/Settings/Security}SecurityOptions', 
    '{http://www.microsoft.com/GroupPolicy/Settings/Auditing}AuditSetting', 
    '{http://www.microsoft.com/GroupPolicy/Settings/Security}Audit',
    '{http://www.microsoft.com/GroupPolicy/Settings/Security}UserRightsAssignment'
]

tag_define_dict = {
    "{http://www.microsoft.com/GroupPolicy/Settings/Security}Account": "Name",
    "{http://www.microsoft.com/GroupPolicy/Settings/Security}SecurityOptions": ["Name", "SystemAccessPolicyName"],
    "{http://www.microsoft.com/GroupPolicy/Settings/Auditing}AuditSetting": "SubcategoryName",
    "{http://www.microsoft.com/GroupPolicy/Settings/Security}Audit": "Name",
    "{http://www.microsoft.com/GroupPolicy/Settings/Security}UserRightsAssignment" : "Name"
}

# xml_tags = ['Name', 'SubcategoryName', 'SystemAccessPolicyName']

link_dict = {
    # Account Policies - Pasword Policy
    "ClearTextPassword": "SettingBoolean",
    "MaximumPasswordAge": "SettingNumber",
    "MinimumPasswordAge": "SettingNumber",
    "MinimumPasswordLength": "SettingNumber",
    "PasswordComplexity": "SettingBoolean",
    "PasswordHistorySize": "SettingNumber",
    "Relax minimum password length limits": "DisplayBoolean",
    
    # Account Policies - Accout Lockout Policy
    "LockoutBadCount": "SettingNumber",
    "LockoutDuration": "SettingNumber",
    "ResetLockoutCount": "SettingNumber",
    
    # Account Policies - Kerberos Policy
    "MaxClockSkew": "SettingNumber",
    "MaxRenewAge": "SettingNumber",
    "MaxServiceAge": "SettingNumber",
    "MaxTicketAge": "SettingNumber",
    "TicketValidateClient": "SettingBoolean",
    
    # Local policies - Audit Policy
    "AuditAccountLogon": ["SuccessAttempts", "FailureAttempts"],
    "AuditLogonEvents": ["SuccessAttempts", "FailureAttempts"],
    "AuditDSAccess": ["SuccessAttempts", "FailureAttempts"],
    "AuditObjectAccess": ["SuccessAttempts", "FailureAttempts"],
    
    # Local policies - User Rights Assignment
    "SeInteractiveLogonRight": "Member",
    "SeNetworkLogonRight": "Member",
    "SeRemoteInteractiveLogonRight": "Member",
    "SeAssignPrimaryTokenPrivilege": "Member",
    "SeAuditPrivilege": "Member",
    "SeBackupPrivilege": "Member",
    "SeBatchLogonRight": "Member",
    "SeChangeNotifyPrivilege": "Member",
    "SeCreatePagefilePrivilege": "Member",
    "SeDebugPrivilege": "Member",
    "SeEnableDelegationPrivilege": "Member",
    "SeIncreaseBasePriorityPrivilege": "Member",
    "SeIncreaseQuotaPrivilege": "Member",
    "SeLoadDriverPrivilege": "Member",
    "SeMachineAccountPrivilege": "Member",
    "SeProfileSingleProcessPrivilege": "Member",
    "SeRemoteShutdownPrivilege": "Member",
    "SeRestorePrivilege": "Member",
    "SeSecurityPrivilege": "Member",
    "SeShutdownPrivilege": "Member",
    "SeSystemEnvironmentPrivilege": "Member",
    "SeSystemProfilePrivilege": "Member",
    "SeSystemTimePrivilege": "Member",
    "SeTakeOwnershipPrivilege": "Member",
    "SeUndockPrivilege": "Member",
    
    # Local policies - Security Options
    "Network security: Do not store LAN Manager hash value on next password change": "DisplayBoolean",
    "ForceLogoffWhenHourExpire": "SettingNumber",
    "LSAAnonymousNameLookup": "SettingNumber",
    "Microsoft network server: Digitally sign communications (if client agrees)": "DisplayBoolean",
    "Microsoft network server: Digitally sign communications (always)": "DisplayBoolean",
    "Domain member: Digitally encrypt or sign secure channel data (always)": "DisplayBoolean",
    "Domain controller: LDAP server signing requirements": "DisplayString",
    
    # Advanced Audit Policy Configuration - Audit Policies - Account Logon
    "Audit Credential Validation": "SettingValue",
    "Audit Other Account Logon Events": "SettingValue",
    "Audit Kerberos Authentication Service": "SettingValue",
    "Audit Kerberos Service Ticket Operations": "SettingValue",
    
    # Advanced Audit Policy Configuration - Audit Policies - Account Management
    "Audit Application Group Management": "SettingValue",
    "Audit Computer Account Management": "SettingValue",
    "Audit Distribution Group Management": "SettingValue",
    "Audit Other Account Management Events": "SettingValue",
    "Audit Security Group Management": "SettingValue",
    "Audit User Account Management": "SettingValue", 
    
    # Advanced Audit Policy Configuration - Audit Policies - DS Access
    "Audit Detailed Directory Service Replication": "SettingValue",
    "Audit Directory Service Access": "SettingValue",
    "Audit Directory Service Changes": "SettingValue",
    "Audit Directory Service Replication": "SettingValue",
    "Audit Other Object Access Events": "SettingValue",
        
    # Advanced Audit Policy Configuration - Audit Policies - Logon/Logoff
    "Audit Logoff": "SettingValue",
    "Audit Logon": "SettingValue",
    "Audit Other Logon/Logoff Events": "SettingValue",
    "Audit Special Logon": "SettingValue",
    "Audit Other Object Access Events": "SettingValue",
    
    # Advanced Audit Policy Configuration - Audit Policies - Object Access
    "Audit File Share": "SettingValue"
}

attribute_dict = {
    "Member": "Name"
}

user_rights_list = [
    "SeInteractiveLogonRight",
    "SeNetworkLogonRight",
    "SeRemoteInteractiveLogonRight",
    "SeAssignPrimaryTokenPrivilege",
    "SeAuditPrivilege",
    "SeBackupPrivilege",
    "SeBatchLogonRight",
    "SeChangeNotifyPrivilege",
    "SeCreatePagefilePrivilege",
    "SeDebugPrivilege",
    "SeEnableDelegationPrivilege",
    "SeIncreaseBasePriorityPrivilege",
    "SeIncreaseQuotaPrivilege",
    "SeLoadDriverPrivilege",
    "SeMachineAccountPrivilege",
    "SeProfileSingleProcessPrivilege",
    "SeRemoteShutdownPrivilege",
    "SeRestorePrivilege",
    "SeSecurityPrivilege",
    "SeShutdownPrivilege",
    "SeSystemEnvironmentPrivilege",
    "SeSystemProfilePrivilege",
    "SeSystemTimePrivilege",
    "SeTakeOwnershipPrivilege",
    "SeUndockPrivilege"
]

# security_link_dict = {
#     #pasword
#     "MinimumPasswordLength": "SettingNumber",
#     "PasswordComplexity": "SettingBoolean",
#     "PasswordHistorySize": "SettingNumber",
#     "Relax minimum password length limits": "DisplayBoolean",
#     #login logon logoff
#     "AuditAccountLogon": ["SuccessAttempts", "FailureAttempts"],
#     "AuditLogonEvents": ["SuccessAttempts", "FailureAttempts"]
# }

# auditting_link_dict = {
#     #file share
#     "Audit File Share": "SettingValue",
#     #login logon logoff
#     "Audit Credential Validation": "SettingValue",
#     "Audit Other Account Logon Events": "SettingValue",
#     "Audit Logoff": "SettingValue",
#     "Audit Logon": "SettingValue",
#     "Audit Other Logon/Logoff Events": "SettingValue",
#     "Audit Special Logon": "SettingValue",
#     #kerberos
#     "Audit Kerberos Authentication Service": "SettingValue",
#     "Audit Kerberos Service Ticket Operations": "SettingValue"
# }


# pasword_policy_dict = {
#     "MinimumPasswordLength": "SettingNumber",
#     "PasswordComplexity": "SettingBoolean",
#     "PasswordHistorySize": "SettingNumber",
#     "MACHINE\\System\\CurrentControlSet\\Control\\SAM\\RelaxMinimumPasswordLengthLimits": "SettingNumber" 
# }
        
# file_share_audit_dict = {
#     "Audit File Share": "SettingValue"
# }
        
# kerberos_audit_dict = {
#     "Audit Kerberos Authentication Service": "SettingValue",
#     "Audit Kerberos Service Ticket Operations": "SettingValue"
# }

# login_logon_logoff_audit_dict = {
#     "AuditAccountLogon": ["SuccessAttempts", "FailureAttempts"],
#     "AuditLogonEvents": ["SuccessAttempts", "FailureAttempts"],
#     "Audit Credential Validation": "SettingValue",
#     "Audit Other Account Logon Events": "SettingValue",
#     "Audit Logoff": "SettingValue",
#     "Audit Logon": "SettingValue",
#     "Audit Other Logon/Logoff Events": "SettingValue",
#     "Audit Special Logon": "SettingValue",
# }

class PsSession(object):
    def __init__(self, ip='', username='', password='', domain=''):
        if ip:
            self.ip = ip
        else:
            self.get_ip_from_hostname(domain)
        self.username = username
        self.password = password
        self.domain = domain
        
        self.conn = self.connection_init()
        
    def connection_init(self):
        session = winrm.Session(self.ip, auth=(self.username, self.password))
        return session
    
    def close_session(self):
        self.conn = None
    
    def runPsCommand(self, command):
        result = self.conn.run_ps(command).std_out.decode()
        # print(result)
        return result
    
    def run_get_gporeport_user(self, policy_list):
        for policy in policy_list:
            result_ps = self.runPsCommand("Get-GPOReport -Name '" + policy + "' -ReportType Xml")
            if self.is_user_right(result_ps):
                print(Fore.GREEN + '\n[+] Getting all details of GPO ' + policy + Style.RESET_ALL)
                self.get_policy_by_member(result_ps)
                
    def run_get_gporeport_gpo(self, policy_list, isPrinted=True):
        for policy in policy_list:
            result_ps = self.runPsCommand("Get-GPOReport -Name '" + policy + "' -ReportType Xml")
            print(Fore.GREEN + '\n[+] Getting all details of GPO ' + policy + Style.RESET_ALL)
            self.parseXML(result_ps, isPrinted=isPrinted)
            

            
    def run_get_gporeport_gpo_by_name(self, policy_name, isPrinted=True):
        result_ps = self.runPsCommand("Get-GPOReport -Name '" + policy_name + "' -ReportType Xml")
        # print(Fore.GREEN + '\n[+] Getting all details of GPO ' + policy + Style.RESET_ALL)
        return self.parseXML(result_ps, isPrinted=isPrinted)
                    
    def replace_tag_link(self, tag, link):
        return tag.replace(link, '')
    
    def name_value_list_case(self, setting, link,  name_value):
        value_1_tag = setting.find('.//' + link + link_dict[name_value][0]).tag
        value_2_tag = setting.find('.//' + link + link_dict[name_value][1]).tag
        value_1 = setting.find('.//' + link + link_dict[name_value][0]).text
        value_2 = setting.find('.//' + link + link_dict[name_value][1]).text
        # for link_1 in links:
        value_1_tag_after = self.replace_tag_link(value_1_tag, link)
        value_2_tag_after = self.replace_tag_link(value_2_tag, link)
        if value_1_tag_after!=value_1_tag and value_2_tag_after!=value_2_tag:
            return [name_value, value_1_tag_after + ' (' + value_1 + ')', value_2_tag_after + ' (' + value_2 + ')']
            # print(value_1, value_2)
            
    def member_attribute_case(self, setting, link, name_value, search):
        find_result = []
        find = setting.findall('.//' + links[2] + attribute_dict[link_dict[name_value]])
        if find is not None:
            for attri in find:
                # print(attri.text)
                if attri.text!='':
                    if attri is not None and attri.text not in link_dict:
                        find_result.append(attri.text)
            attr = search.tag
            attr_split = attr.replace(link, '')
            # print(find_result)
            if attr_split!=attr:
                # find_result.append()
                return [name_value, attr_split + ': ' + str(find_result).replace("'", '').replace('[', '').replace(']', '').strip(), 'None']
                # print(str(find_result))
                # print(attr_split)
                # print(attr)
    
    def settingValue_attribute_case(self, name_value, value):
        if value=='1':
            return [name_value, 'Audit Success', 'None']
        elif value=='2':
            return [name_value, 'Audit Failure', 'None']
        elif value=='3':
            return [name_value, 'Audit Success and Failure', 'None']
        # print(value)
        
    def is_user_right(self, xmlFile):
        root = ET.fromstring(xmlFile)
        extension_tag = root.iter(extension_link)
        # Check if the Extension tag is found
        if extension_tag is not None:
            # Extract data within Extension tag
            for child in extension_tag:
                for setting in child:
                    for link in links:
                        if setting.tag in tag_define:
                            if type(tag_define_dict[setting.tag]) is not list:
                                find_tag = setting.find('.//' + link + tag_define_dict[setting.tag])
                                if find_tag is not None:          
                                    name_value = find_tag.text
                                    # print(name_value, end = ': ')    
                                    if name_value in user_rights_list:
                                        return True
                                    else: 
                                        return False
                                        
    def get_member_list(self, child):
        member_list = []
        for setting in child:
            for link in links:
                if setting.tag in tag_define:
                    if type(tag_define_dict[setting.tag]) is not list:
                        find_tag = setting.find('.//' + link + tag_define_dict[setting.tag])
                        if find_tag is not None:          
                            name_value = find_tag.text
                            # print(name_value, end = ': ')    
                            if name_value in link_dict:
                                if type(link_dict[name_value]) is not list:
                                    search = setting.find('.//' + link + link_dict[name_value])
                                    if link_dict[name_value]=='Member':
                                        find = setting.findall('.//' + links[2] + attribute_dict[link_dict[name_value]])
                                        if find is not None:
                                            for attri in find:
                                                # print(attri.text)
                                                attribute = attri.text
                                                if attribute!='':
                                                    if attri is not None and attri.text not in member_list:
                                                        member_list.append(attribute)                                     
        # print(member_list)
        return member_list
    
    def get_member_dict(self, child):
        member_dict = {}
        for setting in child:
            for link in links:
                if setting.tag in tag_define:
                    if type(tag_define_dict[setting.tag]) is not list:
                        find_tag = setting.find('.//' + link + tag_define_dict[setting.tag])
                        if find_tag is not None:          
                            name_value = find_tag.text
                            # print(name_value, end = ': ')    
                            if name_value in link_dict:
                                if type(link_dict[name_value]) is not list:
                                    search = setting.find('.//' + link + link_dict[name_value])
                                    if link_dict[name_value]=='Member':
                                        find_result = []
                                        find = setting.findall('.//' + links[2] + attribute_dict[link_dict[name_value]])
                                        if find is not None:
                                            for attri in find:
                                                # print(attri.text)
                                                attribute = attri.text
                                                if attribute!='':
                                                    if attri is not None and attribute not in link_dict:
                                                        find_result.append(attribute)
                                        member_dict[name_value] = find_result
        # print(member_dict)
        return member_dict
        
    def get_policy_by_member(self, xmlFile):
        result = []
        user_rights_dict = {}
        root = ET.fromstring(xmlFile)
        extension_tag = root.iter(extension_link)
        # Check if the Extension tag is found
        if extension_tag is not None:
            # Extract data within Extension tag
            for child in extension_tag:
                # print(child.tag, child.text)
                member_list = self.get_member_list(child)
                member_dict = self.get_member_dict(child)
                for member in member_list:
                    rights = [] 
                    for key, value in member_dict.items():
                        if member in value:
                            # print(key + ': ' + member)
                            rights.append(key)
                    user_rights_dict[member] = rights
        for key, value in user_rights_dict.items():
            result.append([key, str(value).replace("'", '').replace('[', '').replace(']', '').strip()])
        if len(result) > 0:
            printTable(result, header=['Users/Groups', 'Rights/Permissions'])         
                                       
    def parse_gpo_xml(self, setting, link, tag_define_dict):
        find_tag = setting.find('.//' + link + tag_define_dict)
        if find_tag is not None:          
            name_value = find_tag.text
            # print(name_value, end = ': ')    
            if name_value in link_dict:
                if type(link_dict[name_value]) is list:
                    return self.name_value_list_case(setting, link, name_value)
                else:    
                    search = setting.find('.//' + link + link_dict[name_value])
                    value = search.text
                    if link_dict[name_value]=='Member':
                        # print(self.member_attribute_case(setting, link, name_value, search))
                        return self.member_attribute_case(setting, link, name_value, search)
                    if link_dict[name_value]=='SettingValue':
                        return self.settingValue_attribute_case(name_value, value)
                    else:
                        return [name_value, value, 'None'] 

    def parseXML(self, xmlFile, isPrinted=True):
        # Extract GPO settings
        root = ET.fromstring(xmlFile)
        extension_tag = root.iter(extension_link)
        result = []
        # Check if the Extension tag is found
        if extension_tag is not None:
            # Extract data within Extension tag
            for child in extension_tag:
                # print(child.tag, child.text)
                for setting in child:
                    for link in links:
                        if setting.tag in tag_define: 
                            if type(tag_define_dict[setting.tag]) is list:
                                for ele in tag_define_dict[setting.tag]: 
                                    result.append(self.parse_gpo_xml(setting, link, ele))   
                            else:
                                result.append(self.parse_gpo_xml(setting, link, tag_define_dict[setting.tag]))   
        # print(result) 
        result = [sublist for sublist in result if sublist is not None]       
        # print(result)               
        if len(result) > 0 and isPrinted:
            printTable(result, header=['Name', 'Attribute', 'Extra Attribute'])
        
        return result
        
        # for child in root.iter('{http://www.microsoft.com/GroupPolicy/Settings}Extension'):
        #     for setting in child:
        #         print(setting.find('.//{http://www.microsoft.com/GroupPolicy/Settings/Security}Name'))
        #         print(child.tag, child.text)
        # extension_data = root.find('.//ExtensionData')
        # print(extension_data)

class PSReport(PsSession):
    def __init__(self, ip='', username='', password='', domain=''):
        super().__init__(ip, username, password, domain)
        
    def report_enum(self, policy_list, result_buf):
        result_buf = self.gpo_deltail_report(policy_list, result_buf)
        return result_buf
        
    def gpo_deltail_report(self, policy_list, result_buf):
        result_buf['Enumeration']['GPOs_Detail'] = {} 
        for policy in policy_list:
            result_ps = self.runPsCommand("Get-GPOReport -Name '" + policy + "' -ReportType Xml")
            # print(Fore.GREEN + '\n[+] Getting all details of GPO ' + policy + Style.RESET_ALL)
            pol_detail = self.parseXML(result_ps, isPrinted=False)
            result_buf['Enumeration']['GPOs_Detail'][policy] = pol_detail
        return result_buf