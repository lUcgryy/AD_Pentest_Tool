import ldap3
import argparse
import socket
import sys
from Util.writeHelper import *
from colorama import Fore, Style
import re

UF_ACCOUNTDISABLE = 0x00000002
UF_DONT_REQUIRE_PREAUTH = 0x00400000
pink_pastel_rgb = (255, 192, 203)     # Định nghĩa mã màu RGB của màu hồng pastel

class LDAPSession(object):
    def __init__(self, ip='', username='', password='', domain=''):
        if ip:
            self.ip = ip
        else:
            self.get_ip_from_hostname(domain)
        self.username = username
        self.password = password
        self.domain = domain
        
        self.conn = self.connection_init()
        self.domain_base = ''
        self.is_binded = False
        
    # Hàm để tạo mã ANSI cho màu từ RGB
    def rgbToAnsi(self, r, g, b):
        return f"\033[38;2;{r};{g};{b}m"
    
    def get_ip_from_hostname(self, hostname):
        try:
            dc_ip = socket.gethostbyname(hostname)
        except:
            print('[!] Error: Unable to resolve hostname to IP address')
            
        self.ip = dc_ip
        
    def connection_init(self):
        if not self.ip:
            self.get_ip_from_hostname(self.domain)
        conn = ldap3.Connection(ldap3.Server("ldap://{}".format(self.ip), get_info=ldap3.ALL), user=self.username, password=self.password, auto_bind=True)
        return conn
    
    def unbind(self):
        self.conn.unbind()
        self.is_binded = False
        
    def do_bind(self):
        try:
            self.conn.bind()
            print('[+] Successfully binded to {}'.format(self.ip))
            self.is_binded = True
        except ldap3.core.exceptions.LDAPBindError as e:
            print('[!] Error: {}'.format(e))
            self.is_binded = False
        ##InvalidCredentialsResult: 80090308: LdapErr: DSID-0C09042F, comment: AcceptSecurityContext error, data 52e, v2580
    
    def whoami(self):
        try:
            current_dn = self.conn.extend.standard.who_am_i()
        except ldap3.core.exceptions.LDAPSessionTerminatedByServerError as e:
            print('[!] Error: {}'.format(e))
        
        return current_dn
    
    def get_naming_context(self):
        self.conn.search(search_base = '', search_filter = '(objectclass=*)', search_scope = ldap3.BASE, attributes = ['*'])
        base_dn = self.conn.entries[0].defaultNamingContext.value
        self.domain_base = base_dn
        return base_dn  
    
    def do_ldap_query(self, search_base, search_filter, attributes):
        self.conn.search(search_base, search_filter, attributes=attributes)
        # print(self.conn)
        return self.conn.entries
    
    def isUser(self, distinguishedName):
        isUser = False
        search_filter = '(objectCategory=user)'
        base_dn = self.domain_base
        
        try:
            rawUsers = self.do_ldap_query(base_dn, search_filter, 'distinguishedName')
            for user in rawUsers:
                if (str(distinguishedName).lower()==str(user.distinguishedName.value).lower()):
                    isUser = True
                    break
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving users")
            print("[!] {}".format(e))
            sys.exit(1)

        return isUser
    
    def getAllUsers(self, attributes=''):
        if not attributes:
            attributes = ['cn', 'distinguishedName', 'userPrincipalName', 'description', 'whenCreated', 'whenChanged']

        search_filter = '(objectCategory=user)'
        base_dn = self.domain_base
        result = []
        
        try:
            rawUsers = self.do_ldap_query(base_dn, search_filter, attributes)
            for user in rawUsers:
                isAdmin = False
                for adminUser in self.getAdminUsers():
                    if (str(user.distinguishedName.value)==str(adminUser.distinguishedName.value)):
                        result.append([Fore.RED  + str(user.cn.value) + Style.RESET_ALL, Fore.RED + str(user.userPrincipalName.value) + Style.RESET_ALL, Fore.RED + str(user.whenCreated.value) + Style.RESET_ALL, Fore.RED + str(user.whenChanged.value) + Style.RESET_ALL])
                        isAdmin = True  
                        break
                if (isAdmin==False): 
                    result.append([str(user.cn.value), str(user.userPrincipalName.value), str(user.whenCreated.value), str(user.whenChanged.value)])
            # print(result)
            if len(result) > 0:
                printTable(result, header=['cn', 'userPrincipalName', 'whenCreated', 'whenChanged'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving users")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getAdminUsers(self, attributes=''):
        if not attributes:
            attributes = ['cn', 'distinguishedName', 'userPrincipalName', 'description',  'whenCreated', 'whenChanged']
        
        search_filter = '(&(objectCategory=person)(objectClass=user)(adminCount=1))'
        base_dn = self.domain_base
        # result = []
        
        try:
            rawAdminUsers = self.do_ldap_query(base_dn, search_filter, attributes)
            # for user in rawAdminUsers:
            #     result.append([str(user.cn.value), str(user.userPrincipalName.value), str(user.description.value), str(user.whenCreated.value), str(user.whenChanged.value)])
            # # print(result)
            # if len(result) > 0:
            #     printTable(result, header=['cn', 'sAMAccountName', 'userPrincipalName', 'description', 'memberOf', 'whenCreated', 'whenChanged'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving Admin Users")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
        
    def get_as_rep_user(self, attributes=''):
        if not attributes:
            attributes = ['cn', 'sAMAccountName', 'userPrincipalName', 'memberOf', 'whenCreated', 'whenChanged']
        base_dn = self.domain_base
        # print(base_dn)
        search_filter = "(&(UserAccountControl:1.2.840.113556.1.4.803:=%d)" \
                    "(!(UserAccountControl:1.2.840.113556.1.4.803:=%d))(!(objectCategory=computer)))" % \
                        (UF_DONT_REQUIRE_PREAUTH, UF_ACCOUNTDISABLE)
        try:
            rawAsRepUser = self.do_ldap_query(base_dn, search_filter, attributes)
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving users")
            print("[!] {}".format(e))
            sys.exit(1)
        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def isGroup(self, distinguishedName):
        isGroup = False
        search_filter = '(objectCategory=group)'
        base_dn = self.domain_base
        
        try:
            rawgroup = self.do_ldap_query(base_dn, search_filter, 'distinguishedName')
            for group in rawgroup:
                if (str(distinguishedName).lower()==str(group.distinguishedName.value).lower()):
                    isGroup = True
                    break
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving groups")
            print("[!] {}".format(e))
            sys.exit(1)

        return isGroup
    
    def getAllGroups(self, attributes='', isPrinted=True):
        if not attributes:
            attributes = ['distinguishedName', 'name', 'cn', 'member', 'description', 'whenCreated', 'whenChanged']
        
        search_filter = '(objectCategory=group)'
        base_dn = self.domain_base
        result = []
        
        try:
            rawgroup = self.do_ldap_query(base_dn, search_filter, attributes)
            for group in rawgroup:
                if (str(group.member.value).strip().lower()=='none'):
                    result.append([str(group.cn.value), str(group.member.value), str(group.description.value), str(group.whenCreated.value), str(group.whenChanged.value)])
                else:
                    members = []
                    groupMembers = group.member.value
                    if (isinstance(groupMembers, str)):
                        groupMembers = [groupMembers]
                    for member in groupMembers:
                        members.append(re.findall(r'CN=(.*)', str(member.split(',')[0]))[0])
                    result.append([str(group.cn.value), ", ".join(members), str(group.description.value), str(group.whenCreated.value), str(group.whenChanged.value)])
            if len(result) > 0 and isPrinted:
                printTable(result, header=['cn', 'member', 'description', 'whenCreated', 'whenChanged'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving groups")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getAllComputers(self, attributes=''):
        print('\n[+] Getting all computers\n')
        if not attributes:
            attributes = ['cn', 'dNSHostName', 'operatingSystem', 'operatingSystemVersion']  
            
        search_filter = '(objectClass=Computer)'
        base_dn = self.domain_base
        result = []
        
        try:
            rawComputers = self.do_ldap_query(base_dn, search_filter, attributes)
            for computer in rawComputers:
                result.append([computer.cn.value, computer.dNSHostName.value, computer.operatingSystem.value, computer.operatingSystemVersion.value])
            # print(result)
            if len(result) > 0:
                printTable(result, header=['cn', 'dNSHostName', 'operatingSystem', 'operatingSystemVersion'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving computers")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getGPOs (self, attributes=''):
        if not attributes:
            attributes =['displayName', 'gPCFileSysPath']
            
        search_filter = '(objectClass=groupPolicyContainer)'
        base_dn = self.domain_base
        result = []
        
        try:
            rawGPOs = self.do_ldap_query(base_dn, search_filter, attributes)
            for gpo in rawGPOs:
                result.append([str(gpo.displayName.value), str(gpo.gPCFileSysPath.value)])
            if len(result) > 0:
                printTable(result, header=['displayName', 'gPCFileSysPath'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving GPOs")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getAllDCs(self, attributes=''):
        if not attributes:
            attributes = ['dNSHostName', 'operatingSystem', 'operatingSystemVersion']
            
        search_filter = '(&(objectClass=computer)(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=8192))'
        base_dn = self.domain_base
        result = []
        
        try:
            rawDCs = self.do_ldap_query(base_dn, search_filter, attributes)
            for dc in rawDCs:
                result.append([str(dc.dNSHostName.value), str(dc.operatingSystem.value), str(dc.operatingSystemVersion.value)])
            if len(result) > 0:
                printTable(result, header=['dNSHostName', 'operatingSystem', 'operatingSystemVersion'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving DCs")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
        
    def getAllOUs(self, attributes=''):
        if not attributes:
            attributes = ['name', 'distinguishedName', 'description', 'whenCreated', 'whenChanged']
            
        search_filter = '(objectClass=organizationalUnit)'
        base_dn = self.domain_base
        result = []
        
        try:
            rawOUs = self.do_ldap_query(base_dn, search_filter, attributes)
            for ou in rawOUs:
                result.append([str(ou.name.value), str(ou.distinguishedName.value), str(ou.description.value), str(ou.whenCreated.value), str(ou.whenChanged.value)])
            if len(result) > 0:
                printTable(result, header=['name', 'distinguishedName', 'description', 'whenCreated', 'whenChanged'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving OUs")
            print("[!] {}".format(e))
            sys.exit(1)
        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getGroupMember(self, groupName, attributes=''):
        if not attributes:
            attributes = ['member']
        search_filter = '(&(objectClass=group)(cn={}))'.format(groupName)
        base_dn = self.domain_base
        result = []
        try:
            rawGroup = self.do_ldap_query(base_dn, search_filter, attributes)
            for group in rawGroup:
                if (str(group.member.value).strip().lower()!='none'):
                    groupMembers = group.member.value
                    if (isinstance(groupMembers, str)):
                        groupMembers = [groupMembers]
                    for member in groupMembers:
                        if (self.isUser(member)):
                            result.append((self.disdistinguishedName2Name(member), "user"))
                        if (self.isGroup(member)):
                            result.append((self.disdistinguishedName2Name(member), "group"))
            # if len(result) > 0:
            #     printTable(result, header=['name', 'type'])    
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving members of group")
            print("[!] {}".format(e))
            sys.exit(1)
            
        return result
    
    def getAllGroupAndMember(self, attributes=''):
        try:
            allGroups = self.getAllGroups(isPrinted=False)
            result = []
            for group in allGroups:
                groupName = str(group.name.value)
                members = []
                groupMembers = self.getGroupMember(groupName)
                # print(groupMember)
                if len(groupMembers) > 0:
                    # print(groupMembers)
                    for member in groupMembers:
                        # result.append([groupName, member[0], member[1]])
                        members.append(member[0] + ' (' + member[1] + ')')
                    result.append([groupName, ", ".join(members)])                        
            if len(result) > 0:
                printTable(result, header=['group name', 'member', 'type']) 
                printTable(result, header=['group name', 'member'])    
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving members of all groups")
            print("[!] {}".format(e))
            sys.exit(1)
                    
    def disdistinguishedName2Name(self, distinguishedName):        
        return re.findall(r'CN=(.*)', str(distinguishedName).split(',')[0])[0]