import ldap3
import argparse
import socket
import sys
from uuid import UUID

import ldap3.core
from Util.writeHelper import *
from Enumeration.ACLs import *
from colorama import Fore, Style
import re


UF_ACCOUNTDISABLE = 0x00000002
UF_DONT_REQUIRE_PREAUTH = 0x00400000
pink_pastel_rgb = (255, 192, 203)     # Định nghĩa mã màu RGB của màu hồng pastel

class LDAPSession(object):
    def __init__(self, ip='', username='', password='', domain=''):
        if ip:
            self.ip = ip
        else:
            self.get_ip_from_hostname(domain)
        self.username = username
        self.password = password
        self.domain = domain
        
        self.conn = self.connection_init()
        self.domain_base = ''
        self.is_binded = False
        
    # Hàm để tạo mã ANSI cho màu từ RGB
    def rgbToAnsi(self, r, g, b):
        return f"\033[38;2;{r};{g};{b}m"
    
    def get_ip_from_hostname(self, hostname):
        try:
            dc_ip = socket.gethostbyname(hostname)
        except:
            print('[!] Error: Unable to resolve hostname to IP address')
            
        self.ip = dc_ip
    
    def get_domain_from_ip(self, ip):
        try:
            domain = socket.gethostbyaddr(ip)[0]
        except:
            print('[!] Error: Unable to get domain name')
            
        self.domain = domain
        
    def connection_init(self):
        if not self.ip:
            self.get_ip_from_hostname(self.domain)
        if not self.domain:
            self.get_domain_from_ip(self.ip)
        try:
            conn = ldap3.Connection(ldap3.Server("ldap://{}".format(self.ip), get_info=ldap3.ALL), user=self.username, password=self.password, auto_bind=True)
        except ldap3.core.exceptions.LDAPBindError: 
            print('[!] Error: The provided credential is incorrect')
            sys.exit(1)
        except:
            print('[!] Error: Unable to connect to LDAP server')
            sys.exit(1)
        return conn
    
    def unbind(self):
        self.conn.unbind()
        self.is_binded = False
        
    def do_bind(self):
        try:
            self.conn.bind()
            print('[+] Successfully binded to {}'.format(self.ip))
            self.is_binded = True
        except ldap3.core.exceptions.LDAPBindError as e:
            print('[!] Error: {}'.format(e))
            self.is_binded = False
        ##InvalidCredentialsResult: 80090308: LdapErr: DSID-0C09042F, comment: AcceptSecurityContext error, data 52e, v2580
    
    def whoami(self):
        try:
            current_dn = self.conn.extend.standard.who_am_i()
        except ldap3.core.exceptions.LDAPSessionTerminatedByServerError as e:
            print('[!] Error: {}'.format(e))
        
        return current_dn
    
    def get_naming_context(self):
        self.conn.search(search_base = '', search_filter = '(objectclass=*)', search_scope = ldap3.BASE, attributes = ['*'])
        base_dn = self.conn.entries[0].defaultNamingContext.value
        self.domain_base = base_dn
        return base_dn  
    
    def do_ldap_query(self, search_base, search_filter, attributes):
        controls = ldap3.protocol.microsoft.security_descriptor_control(sdflags=0x05)
        self.conn.search(search_base, search_filter, attributes=attributes, controls=controls)
        # print(self.conn)
        return self.conn.entries
    
    def isUser(self, distinguishedName):
        isUser = False
        search_filter = '(&(objectCategory=person)(objectClass=user))'
        base_dn = self.domain_base
        
        try:
            rawUsers = self.do_ldap_query(base_dn, search_filter, 'distinguishedName')
            for user in rawUsers:
                if (str(distinguishedName).lower()==str(user.distinguishedName.value).lower()):
                    isUser = True
                    break
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving users")
            print("[!] {}".format(e))

        return isUser
    
    def getAllDomains(self, attributes='', isPrinted=True):
        if not attributes:
            attributes = ['*']
            
        search_filter = '(objectClass=domain)'
        base_dn = self.domain_base
        result = []
        domains = self.do_ldap_query(base_dn, search_filter, attributes)
        return domains
        
    def getAllUsers(self, attributes='', isPrinted=True):
        if not attributes:
            attributes = ['cn', 'distinguishedName', 'userPrincipalName', 'description', 'whenCreated', 'whenChanged', 'objectGUID','lastLogon','pwdlastset']

        search_filter = '(objectCategory=user)'
        base_dn = self.domain_base
        result = []
        
        try:
            if isPrinted:
                rawUsers = self.do_ldap_query(base_dn, search_filter, attributes)
                for user in rawUsers:
                    isAdmin = False
                    for adminUser in self.getAdminUsers():
                        if (str(user.distinguishedName.value)==str(adminUser.distinguishedName.value)):
                            result.append([Fore.RED  + str(user.cn.value) + Style.RESET_ALL, Fore.RED + str(user.userPrincipalName.value) + Style.RESET_ALL, Fore.RED + str(user.whenCreated.value) + Style.RESET_ALL, Fore.RED + str(user.whenChanged.value) + Style.RESET_ALL])
                            isAdmin = True  
                            break
                    if (isAdmin==False): 
                        result.append([str(user.cn.value), str(user.userPrincipalName.value), str(user.whenCreated.value), str(user.whenChanged.value)])
                # print(result)
                if len(result) > 0:
                    printTable(result, header=['cn', 'userPrincipalName', 'whenCreated', 'whenChanged'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving users")
            print("[!] {}".format(e))
        users = self.do_ldap_query(base_dn, search_filter, attributes)
        # print(users)
        return users
    
    def getAdminUsers(self, attributes=''):
        if not attributes:
            attributes = ['cn', 'distinguishedName', 'userPrincipalName', 'description',  'whenCreated', 'whenChanged']
        
        search_filter = '(&(objectCategory=person)(objectClass=user)(adminCount=1))'
        base_dn = self.domain_base
        # result = []
        
        try:
            rawAdminUsers = self.do_ldap_query(base_dn, search_filter, attributes)
            # for user in rawAdminUsers:
            #     result.append([str(user.cn.value), str(user.userPrincipalName.value), str(user.description.value), str(user.whenCreated.value), str(user.whenChanged.value)])
            # # print(result)
            # if len(result) > 0:
            #     printTable(result, header=['cn', 'sAMAccountName', 'userPrincipalName', 'description', 'memberOf', 'whenCreated', 'whenChanged'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving Admin Users")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
        
    def get_as_rep_user(self, attributes=''):
        if not attributes:
            attributes = ['cn', 'sAMAccountName', 'userPrincipalName', 'memberOf', 'whenCreated', 'whenChanged']
        base_dn = self.domain_base
        # print(base_dn)
        search_filter = "(&(UserAccountControl:1.2.840.113556.1.4.803:=%d)" \
                    "(!(UserAccountControl:1.2.840.113556.1.4.803:=%d))(!(objectCategory=computer)))" % \
                        (UF_DONT_REQUIRE_PREAUTH, UF_ACCOUNTDISABLE)
        try:
            rawAsRepUser = self.do_ldap_query(base_dn, search_filter, attributes)
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving users")
            print("[!] {}".format(e))
            sys.exit(1)
        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def isGroup(self, distinguishedName):
        isGroup = False
        search_filter = '(objectCategory=group)'
        base_dn = self.domain_base
        
        try:
            rawgroup = self.do_ldap_query(base_dn, search_filter, 'distinguishedName')
            for group in rawgroup:
                if (str(distinguishedName).lower()==str(group.distinguishedName.value).lower()):
                    isGroup = True
                    break
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving groups")
            print("[!] {}".format(e))
            sys.exit(1)

        return isGroup
    
    def getAllGroups(self, attributes='', isPrinted=True):
        if not attributes:
            attributes = ['distinguishedName', 'name', 'cn', 'member', 'description', 'whenCreated', 'whenChanged', 'objectGUID']
        
        search_filter = '(objectCategory=group)'
        base_dn = self.domain_base
        result = []
        
        try:
            if isPrinted:
                rawgroup = self.do_ldap_query(base_dn, search_filter, attributes)
                for group in rawgroup:
                    if (str(group.member.value).strip().lower()=='none'):
                        result.append([str(group.cn.value), str(group.member.value), str(group.description.value), str(group.whenCreated.value), str(group.whenChanged.value)])
                    else:
                        members = []
                        groupMembers = group.member.value
                        if (isinstance(groupMembers, str)):
                            groupMembers = [groupMembers]
                        for member in groupMembers:
                            members.append(re.findall(r'CN=(.*)', str(member.split(',')[0]))[0])
                        result.append([str(group.cn.value), ", ".join(members), str(group.description.value), str(group.whenCreated.value), str(group.whenChanged.value)])
                if len(result) > 0:
                    printTable(result, header=['cn', 'member', 'description', 'whenCreated', 'whenChanged'])
            
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving groups")
            print("[!] {}".format(e))
            sys.exit(1)
        groups = self.do_ldap_query(base_dn, search_filter, attributes)
        # print(groups)
        return groups
    
    def getAllGroups_prettier(self, attributes=''):
        if not attributes:
            attributes = ['distinguishedName', 'name', 'cn', 'member', 'description', 'whenCreated', 'whenChanged', 'objectGUID']
        
        search_filter = '(objectCategory=group)'
        base_dn = self.domain_base
        result = []
        
        try:
            rawgroup = self.do_ldap_query(base_dn, search_filter, attributes)
            for group in rawgroup:
                if (str(group.member.value).strip().lower()=='none'):
                    result.append([str(group.cn.value), str(group.member.value), str(group.description.value), str(group.whenCreated.value), str(group.whenChanged.value)])
                else:
                    members = []
                    groupMembers = group.member.value
                    if (isinstance(groupMembers, str)):
                        groupMembers = [groupMembers]
                    for member in groupMembers:
                        members.append(re.findall(r'CN=(.*)', str(member.split(',')[0]))[0])
                    result.append([str(group.cn.value), ", ".join(members), str(group.description.value), str(group.whenCreated.value), str(group.whenChanged.value)])
            
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving groups")
            print("[!] {}".format(e))
            sys.exit(1)
        groups = self.do_ldap_query(base_dn, search_filter, attributes)
        # print(groups)
        return result
    
    def get_objecttype(self):
        objecttype_guid_map = dict()
        sresult = self.conn.extend.standard.paged_search('CN=Schema,CN=Configuration,DC=capstone,DC=local', '(objectCategory=*)', attributes=['name', 'schemaidguid'])
        # print(sresult)
        for res in sresult:
            # print(res)
            if res['attributes']['schemaIDGUID']:
                guid = str(UUID(bytes_le=res['attributes']['schemaIDGUID']))
                objecttype_guid_map[res['attributes']['name'].lower()] = guid
        # print(objecttype_guid_map)    
        return objecttype_guid_map
    
    def getAllComputers(self, attributes='', isPrinted=True):
        # print('\n[+] Getting all computers\n')
        if not attributes:
            attributes = ['cn', 'dNSHostName', 'operatingSystem', 'operatingSystemVersion']  
            
        search_filter = '(objectClass=Computer)'
        base_dn = self.domain_base
        result = []
        
        try:
            if isPrinted:
                rawComputers = self.do_ldap_query(base_dn, search_filter, attributes)
                for computer in rawComputers:
                    result.append([computer.cn.value, computer.dNSHostName.value, computer.operatingSystem.value, computer.operatingSystemVersion.value])
                # print(result)
                if len(result) > 0:
                    printTable(result, header=['cn', 'dNSHostName', 'operatingSystem', 'operatingSystemVersion'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving computers")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getGPOs (self, attributes='', isPrinted=True):
        if not attributes:
            attributes =['*']
            
        search_filter = '(objectClass=groupPolicyContainer)'
        base_dn = self.domain_base
        result = []
        
        try:
            if isPrinted:
                rawGPOs = self.do_ldap_query(base_dn, search_filter, attributes)
                for gpo in rawGPOs:
                    result.append([str(gpo.displayName.value), str(gpo.gPCFileSysPath.value)])
                if len(result) > 0:
                    printTable(result, header=['displayName', 'gPCFileSysPath'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving GPOs")
            print("[!] {}".format(e))
            sys.exit(1)
            
        GPOS = self.do_ldap_query(base_dn, search_filter, attributes)
        # print(GPOS)
        return GPOS
    
    def getAllDCs(self, attributes='', isPrinted=True):
        if not attributes:
            attributes = ['dNSHostName', 'operatingSystem', 'operatingSystemVersion']
            
        search_filter = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'
        base_dn = self.domain_base
        result = []
        
        try:
            if isPrinted:
                rawDCs = self.do_ldap_query(base_dn, search_filter, attributes)
                for dc in rawDCs:
                    result.append([str(dc.dNSHostName.value), str(dc.operatingSystem.value), str(dc.operatingSystemVersion.value)])
                if len(result) > 0:
                    printTable(result, header=['dNSHostName', 'operatingSystem', 'operatingSystemVersion'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving DCs")
            print("[!] {}".format(e))
            sys.exit(1)
        domains = self.do_ldap_query(base_dn, search_filter, attributes)
        return domains
        
    def getAllOUs(self, attributes='', isPrinted=True):
        if not attributes:
            attributes = ['name', 'distinguishedName', 'description', 'whenCreated', 'whenChanged']
            
        search_filter = '(objectClass=organizationalUnit)'
        base_dn = self.domain_base
        result = []
        
        try:
            if isPrinted:
                rawOUs = self.do_ldap_query(base_dn, search_filter, attributes)
                for ou in rawOUs:
                    result.append([str(ou.name.value), str(ou.distinguishedName.value), str(ou.description.value), str(ou.whenCreated.value), str(ou.whenChanged.value)])
                if len(result) > 0:
                    printTable(result, header=['name', 'distinguishedName', 'description', 'whenCreated', 'whenChanged'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving OUs")
            print("[!] {}".format(e))
            sys.exit(1)
        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def get_sid_name_dict(self):
        sid_name_dict = dict()
        for user in self.getAllUsers(['objectSid', 'cn'], isPrinted=False):
            # print(user)
            sid_name_dict[user.objectSid.value] = user.cn.value
        for group in self.getAllGroups(['*'], isPrinted=False):
            sid_name_dict[group.objectSid.value] = group.cn.value
        return sid_name_dict
    
    def getACLs(self, isPrinted=True):
        user_attributes = ['ntSecurityDescriptor', 'distinguishedName']
        group_attributes = ['*']
        base_dn = self.domain_base
        objecttype_guid_map = self.get_objecttype()
        users = self.getAllUsers(attributes=group_attributes, isPrinted=False)
        domains = self.getAllDomains(attributes=group_attributes, isPrinted=False)
        groups = self.getAllGroups(attributes=group_attributes, isPrinted=False)
        # computer_attributes = ['ntSecurityDescriptor', 'distinguishedName']
        computers = self.getAllComputers(attributes=group_attributes, isPrinted=False)
        ous = self.getAllOUs(attributes=group_attributes, isPrinted=False)
        gpos = self.getGPOs(attributes=group_attributes, isPrinted=False)
        result_1 = []
        sid_name = self.get_sid_name_dict()
        # print(sid_name)
        for user in users:
            # print(user.distinguishedName.value)
            # print(user)
            ntSecurityDescriptor = user.ntSecurityDescriptor.value
            # sid_name = self.get_sid_name_dict()
            result = parse_binary_acl('user', ntSecurityDescriptor, objecttype_guid_map, sid_name)
            # print(result)
            for key in result:
                if len(result[key]) > 0:
                    # printTable([[str(user.distinguishedName.value), 'user', key, str(result[key])]], header=['SID', 'Type', 'Objecttive', 'Rights'])
                    result_1.append([str(user.distinguishedName.value), 'user', key, ', '.join(result[key])])
        for domain in domains:
            try:
                ntSecurityDescriptor = domain.ntSecurityDescriptor.value
            except:
                continue
            # sid_name = self.get_sid_name_dict()
            result = parse_binary_acl('domain', ntSecurityDescriptor, objecttype_guid_map, sid_name)
            # print(result)
            for key in result:
                if len(result[key]) > 0:
                    # printTable([[str(domain.distinguishedName.value), 'domain', key, str(result[key])]], header=['SID', 'Type', 'Objecttive', 'Rights'])
                    result_1.append([str(domain.distinguishedName.value), 'domain', key, ', '.join(result[key])])
        for group in groups:
            try:
                ntSecurityDescriptor = group.ntSecurityDescriptor.value
            except:
                continue
            # sid_name = self.get_sid_name_dict()
            result = parse_binary_acl('group', ntSecurityDescriptor, objecttype_guid_map, sid_name)
            for key in result:
                if len(result[key]) > 0:
                    # printTable([[str(group.distinguishedName.value), 'group', key, str(result[key])]], header=['SID', 'Type', 'Objecttive', 'Rights'])
                    result_1.append([str(group.distinguishedName.value), 'group', key, ', '.join(result[key])])
        
        for computer in computers:
            try:
                ntSecurityDescriptor = computer.ntSecurityDescriptor.value
            except:
                continue
            # sid_name = self.get_sid_name_dict()
            result = parse_binary_acl('computer', ntSecurityDescriptor, objecttype_guid_map, sid_name)
            for key in result:
                if len(result[key]) > 0:
                    # printTable([[str(computer.distinguishedName.value), 'computer', key, str(result[key])]], header=['SID', 'Type', 'Objecttive', 'Rights'])
                    result_1.append([str(computer.distinguishedName.value), 'computer', key, ', '.join(result[key])])
                    
        for ou in ous:
            try:
                ntSecurityDescriptor = ou.ntSecurityDescriptor.value
            except:
                continue
            # sid_name = self.get_sid_name_dict()
            result = parse_binary_acl('organizational-unit', ntSecurityDescriptor, objecttype_guid_map, sid_name)
            for key in result:
                if len(result[key]) > 0:
                    # printTable([[str(ou.distinguishedName.value), 'ou', key, str(result[key])]], header=['SID', 'Type', 'Objecttive', 'Rights'])
                    result_1.append([str(ou.distinguishedName.value), 'Organizational Unit', key, ', '.join(result[key])])
                    
        for gpo in gpos:
            try:
                ntSecurityDescriptor = gpo.ntSecurityDescriptor.value
            except:
                continue
            # sid_name = self.get_sid_name_dict()
            result = parse_binary_acl('gpo', ntSecurityDescriptor, objecttype_guid_map, sid_name)
            for key in result:
                if len(result[key]) > 0:
                    # printTable([[str(gpo.distinguishedName.value), 'gpo', key, str(result[key])]], header=['SID', 'Type', 'Objecttive', 'Rights'])
                    result_1.append([str(gpo.distinguishedName.value), 'gpo', key, ', '.join(result[key])])
    
        if isPrinted:
            printTable(result_1, header=['DistinguishedName', 'Type', 'Objecttive', 'Rights'])
        return result_1
        
    def getGroupMember(self, groupName, attributes=''):
        if not attributes:
            attributes = ['member']
        search_filter = '(&(objectClass=group)(cn={}))'.format(groupName)
        base_dn = self.domain_base
        result = []
        try:
            rawGroup = self.do_ldap_query(base_dn, search_filter, attributes)
            for group in rawGroup:
                if (str(group.member.value).strip().lower()!='none'):
                    groupMembers = group.member.value
                    if (isinstance(groupMembers, str)):
                        groupMembers = [groupMembers]
                    for member in groupMembers:
                        if (self.isUser(member)):
                            result.append((self.disdistinguishedName2Name(member), "user"))
                        if (self.isGroup(member)):
                            result.append((self.disdistinguishedName2Name(member), "group"))
            # if len(result) > 0:
            #     printTable(result, header=['name', 'type'])    
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving members of group")
            print("[!] {}".format(e))
            sys.exit(1)
            
        return result
    
    def getAllGroupAndMember(self, attributes='', isPrinted=True):
        result = []
        try:
            allGroups = self.getAllGroups(isPrinted=False)
            for group in allGroups:
                groupName = str(group.name.value)
                members = []
                groupMembers = self.getGroupMember(groupName)
                # print(groupMember)
                if len(groupMembers) > 0:
                    # print(groupMembers)
                    for member in groupMembers:
                        # result.append([groupName, member[0], member[1]])
                        members.append(member[0] + ' (' + member[1] + ')')
                    result.append([groupName, ", ".join(members)])                        
            if len(result) > 0 and isPrinted:
                # printTable(result, header=['group name', 'member', 'type']) 
                printTable(result, header=['group name', 'member'])    
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving members of all groups")
            print("[!] {}".format(e))
            sys.exit(1)
        return result
                    
    def disdistinguishedName2Name(self, distinguishedName):        
        return re.findall(r'CN=(.*)', str(distinguishedName).split(',')[0])[0]
    
    def getDomainTrusts(self, attributes='', isPrinted=True):
        if not attributes:
            attributes = ['cn', 'trustParent', 'trustDirection', 'trustType', 'trustAttributes']

        search_filter = '(objectClass=trustedDomain)'
        base_dn = self.domain_base
        result = []
        
        try:
            if isPrinted:
                rawDomainTrusts = self.do_ldap_query(base_dn, search_filter, attributes)
                for trust in rawDomainTrusts:
                    result.append([str(trust.cn.value), str(trust.trustParent.value), str(trust.trustDirection.value), str(trust.trustType.value), str(trust.trustAttributes.value)])
                if len(result) > 0:
                    printTable(result, header=['cn', 'trustParent', 'trustDirection', 'trustType', 'trustAttributes'])
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving Domain Trusts")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
class LDAPReport(LDAPSession):
    def __init__(self, ip='', username='', password='', domain=''):
        super().__init__(ip, username, password, domain)
    
    def report_enum(self, result_buf):
        self.get_naming_context()
        result_buf = self.users_report(result_buf)
        result_buf = self.groups_report(result_buf)
        result_buf = self.group_members_report(result_buf)
        result_buf = self.computers_report(result_buf)
        result_buf = self.ous_report(result_buf)
        result_buf = self.acls_report(result_buf)
        result_buf = self.gpos_report(result_buf)
        return result_buf
    
    def users_report(self, result_buf):
        users = self.getAllUsers(isPrinted=False)
        result = []
        for user in users:
            result.append({
                'cn': str(user.cn.value),
                'userPrincipalName': str(user.userPrincipalName.value),
                'whenCreated': str(user.whenCreated.value),
                'whenChanged': str(user.whenChanged.value)                            
                })
        
        result_buf['Enumeration']['Users'] = result
        return result_buf
    
    def groups_report(self, result_buf):
        groups = self.getAllGroups_prettier()
        result = []
        for group in groups:
            result.append({
                'cn': group[0],
                'member': group[1],
                'description': group[2],
                'whenCreated': group[3],
                'whenChanged': group[4]                            
                })
        
        result_buf['Enumeration']['Groups'] = result
        return result_buf
    
    def group_members_report(self, result_buf):
        group_members = self.getAllGroupAndMember(isPrinted=False)
        result = [] 
        for group_member in group_members:
            result.append({
                'Group Name': group_member[0],
                'Members': group_member[1]
                })
        result_buf['Enumeration']['Group Members'] = result
        return result_buf
    
    def computers_report(self, result_buf):
        computers = self.getAllComputers(isPrinted=False)
        result = []
        for computer in computers:
            result.append({
                'cn': computer.cn.value,
                'dNSHostName': computer.dNSHostName.value,
                'operatingSystem': computer.operatingSystem.value,
                'operatingSystemVersion': computer.operatingSystemVersion.value
                })
        result_buf['Enumeration']['Computers'] = result
        return result_buf
    
    def ous_report(self, result_buf):
        ous = self.getAllOUs(isPrinted=False)
        result = []
        for ou in ous:
            result.append({
                'name': ou.name.value,
                'distinguishedName': ou.distinguishedName.value,
                'description': ou.description.value,
                'whenCreated': ou.whenCreated.value,
                'whenChanged': ou.whenChanged.value
                })
        result_buf['Enumeration']['Organizational Units'] = result
        return result_buf
    
    def acls_report(self, result_buf):
        acls = self.getACLs(isPrinted=False)
        result = []
        for acl in acls:
            result.append({
                'DistinguishedName': acl[0],
                'Type': acl[1],
                'Objecttive': acl[2],
                'Rights': acl[3]
                })
        result_buf['Enumeration']['ACLs'] = result
        return result_buf
    
    def gpos_report(self, result_buf):
        gpos = self.getGPOs(isPrinted=False)
        result = []
        for gpo in gpos:
            result.append({
                'displayName': gpo.displayName.value,
                'gPCFileSysPath': gpo.gPCFileSysPath.value
                })
        result_buf['Enumeration']['GPOs'] = result
        return result_buf