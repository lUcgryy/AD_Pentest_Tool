from Enumeration.LDAPSession import *
from Enumeration.PsSession import *
from Vulnerability.LDAPVuln import *
from Vulnerability.UnAuthVuln import *
from Vulnerability.PSVuln import *
from Exploting.Exploit import *
from Reporting.Util import *
from banner import create_advanced_banner
from colorama import Fore, Style
import argparse
from pprint import pprint
from datetime import datetime
import os
import webbrowser

password_policy = 'Password Policy'
kerberos_audit = 'Kerberos Audit'
login_logon_logoff_audit = 'Login/Logon/Logoff Audit'
file_share_audit = 'File share audit'
lockout_policy = 'Lockout Policy'
user_right_assignment_policy = 'User Right Assignment Policy'
default_domain_policy = 'Default Domain Policy'
default_domain_controllers_policy = 'Default Domain Controllers Policy'

DEFAULT_DOMAIN_POLICY = [
    password_policy,
    kerberos_audit,
    login_logon_logoff_audit,
    file_share_audit,
    lockout_policy,
    user_right_assignment_policy,
    default_domain_policy,
    default_domain_controllers_policy
    ]
def gather_information():
    print("\nGather Information:")
    print("1. Get All info")
    print("2. Get Domain Controller")
    print("3. Get Users")
    print("4. Get Computers")
    print("5. Get Groups")
    print("6. Get OUs")
    print("7. Get ACLs")
    print("8. Get All Group Member")
    print("9. Get GPOs")
    print("10. Get Domain Trusts")
    print("0. Return to Main Menu")
    choice = input("Enter your choice: ")
    return choice

def execute_gather_information(choice, ldap_session: LDAPSession):
    if choice == '1':
        ldap_session.get_naming_context()
        print(Fore.GREEN + '\n[+] Getting all Users' + Style.RESET_ALL)
        ldap_session.getAllUsers()
        print(Fore.GREEN + '[+] Getting all Groups' + Style.RESET_ALL)
        ldap_session.getAllGroups()
        print(Fore.GREEN + '[+] Getting all members of all groups' + Style.RESET_ALL)
        ldap_session.getAllGroupAndMember()
        print(Fore.GREEN + '[+] Getting all Computers' + Style.RESET_ALL)
        ldap_session.getAllComputers()
        print(Fore.GREEN + '[+] Getting all Organizational Units' + Style.RESET_ALL)
        ldap_session.getAllOUs()
        print(Fore.GREEN + '[+] Getting all Domain Controllers' + Style.RESET_ALL)
        ldap_session.getAllDCs()
        print(Fore.GREEN + '[+] Getting all ACLs' + Style.RESET_ALL)
        ldap_session.getACLs()
        print(Fore.GREEN + '[+] Getting Group Policy Objects' + Style.RESET_ALL)
        # ldap_session.get_naming_context()
        GPOS = ldap_session.getGPOs()
        list_gpo_name = []
        for gpo in GPOS:
            list_gpo_name.append(str(gpo.displayName.value))
        ps_session.run_get_gporeport_gpo(list_gpo_name)
        print(Fore.GREEN + '\n[+] Getting all Domain Trusts' + Style.RESET_ALL)
        ldap_session.getDomainTrusts()
        
    elif choice == '2':
        print(Fore.GREEN + '\n[+] Getting all Domain Controllers' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllDCs()
        
    elif choice == '3':
        print(Fore.GREEN + '\n[+] Getting all Users' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllUsers()

    elif choice == '4':
        
        print(Fore.GREEN + '\n[+] Getting all Computers' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllComputers()

    elif choice == '5':
        print(Fore.GREEN + '\n[+] Getting all Groups' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllGroups()

    elif choice == '6':
        print(Fore.GREEN + '\n[+] Getting all Organizational Units' + Style.RESET_ALL)
        ldap_session.get_naming_context()
        ldap_session.getAllOUs()

    elif choice == '7':
        print(Fore.GREEN + '\n[+] Getting all ACLs' + Style.RESET_ALL)
        ldap_session.get_naming_context()
        ldap_session.getACLs()

    elif choice == '8':
        print(Fore.GREEN + '\n[+] Getting all members of all groups' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllGroupAndMember()

    elif choice == '9':
        print(Fore.GREEN + '[+] Getting Group Policy Objects' + Style.RESET_ALL)
        ldap_session.get_naming_context()
        GPOS = ldap_session.getGPOs()
        list_gpo_name = []
        for gpo in GPOS:
            list_gpo_name.append(str(gpo.displayName.value))
        if ps_session.conn:
            ps_session.run_get_gporeport_gpo(list_gpo_name)
        else:
            print('[!] This user does not have permission execute powershell remotely. Skipping get GPOs detail.')
        # print(result_ps)
        # ps_session.close_session()

        # print("Getting GPOs...")
    elif choice == '10':
        print(Fore.GREEN + '\n[+] Getting all Domain Trusts' + Style.RESET_ALL)
        ldap_session.get_naming_context()
        ldap_session.getDomainTrusts()
        
    elif choice == '0':
        return
    else:
        print("Invalid choice. Please select a valid option.")

def init_scan(result_buf):
    result_buf['Detail']['Target'] = domain_ip
    result_buf['Detail']['Domain'] = domain_name
    result_buf['Detail']['ScanType'] = 'Full Scan'
    result_buf['Detail']['Time'] = get_current_time()
    result_buf['Detail']['Credential'] = credential
    
def exploit_sub_menu():
    print("\nExploit Technique:")
    print("1. DCSync")
    print("2. AS-REP Roasting")
    print("3. Abuse ACLs")
    print("0. Return to Main Menu")
    choice = input("Enter your choice: ")
    return choice

def exploit():
    choice = exploit_sub_menu()
    if choice == '2':
        print(Fore.RED + "\n[+] Exploiting AS-REP Roasting..." + Style.RESET_ALL)
        exploiter = Exploit(domain_ip, domain_name, 'AS-REP Roasting')
        exploiter.run()
    
    
def main_menu():
    
    print("\nMain Menu:")
    print("1. Gather Information")
    print("2. Scan Vulnerability")
    print("3. Exploit Vulnerability")
    print("0. Exit")
    choice = input("Enter your choice: ")
    return choice

def execute_main_choice(choice):
    if choice == '1':
        
        while True:
            sub_choice = gather_information()
            if sub_choice == '0':
                break
            execute_gather_information(sub_choice, ldap_session)
    elif choice == '2':
        result_buf = {
            'Detail': {},
            'Enumeration': {},
            'Critical': {},
            'High': {},
            'Medium': {},
            'Low': {},
            'Info': {}
        }
        start_time = datetime.now()
        init_scan(result_buf)
        # print(result_buf)
        unauth_vuln = UnAuth_Vuln('', ip=domain_ip)
        ldap_vuln = LDAP_Vuln(ldap_session)
        result_buf = unauth_vuln.scan_vulnerability(result_buf)
        result_buf = ldap_vuln.scan_vulnerability(result_buf)
        if ps_session.conn:
            ps_vuln = PS_Vuln(ldap_session, ps_session)
            # result_buf = ps_vuln.scan_vulnerability(result_buf)
        # pprint(result_buf)
        ldap_report  = LDAPReport(args.ip, args.username, args.password, args.domain)
        ps_report = PSReport(domain_ip, args.username, args.password)
        ldap_session.get_naming_context()
        GPOS = ldap_session.getGPOs(isPrinted=False)
        list_gpo_name = []
        for gpo in GPOS:
            list_gpo_name.append(str(gpo.displayName.value))
        result_buf = ldap_report.report_enum(result_buf)
        result_buf = ps_report.report_enum(list_gpo_name, result_buf)
        end_time = datetime.now()
        scan_time = end_time - start_time
        # result_buf['Detail']['ScanTime'] = scan_time.total_seconds()
        hour, remainder = divmod(scan_time.total_seconds(), 3600)
        minutes, seconds = divmod(remainder, 60)
        scan_time = f'{int(hour)} hours, {int(minutes)} minutes, {int(seconds)} seconds'
        result_buf['Detail']['ScanTime'] = scan_time
        render_template('./Template/report_tmpl.j2', result_buf)
        print(Fore.GREEN + "\n[+] Scanning completed" + Style.RESET_ALL)
        # Get current path
        current_path = os.getcwd()
        fixed_time_filename = get_current_time().replace(' ','_').replace(':','-')
        print(f"[+] Report has been saved to {current_path}/Report/_{result_buf['Detail']['Domain']}_{fixed_time_filename}.html")
        webbrowser.open(f'file://{current_path}/Report/_{result_buf["Detail"]["Domain"]}_{fixed_time_filename}.html')
        
        
    
    elif choice == '3':
        exploit()
    elif choice == '0':
        print("Exiting...")
        exit()
    else:
        print("Invalid choice. Please select a valid option.")
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='LDAP Session')
    parser.add_argument('-i', '--ip', help='IP address of the domain controller')
    parser.add_argument('-u', '--username', help='Username to authenticate with')
    parser.add_argument('-p', '--password', help='Password to authenticate with')
    parser.add_argument('-d', '--domain', help='Domain to authenticate with')
    args = parser.parse_args()
    # ldap_session = LDAPSession('192.168.0.104', 'giangtran@capstone.local', 'qwerty1234', 'capstone.local')
    ldap_session = LDAPSession(args.ip, args.username, args.password, args.domain)
    credential = args.username
    domain_ip = ldap_session.ip
    domain_name = ldap_session.domain
    ps_session = PsSession(domain_ip, args.username, args.password)
    while True:
        user_choice = main_menu()
        execute_main_choice(user_choice)