from Enumeration.LDAPSession import *
from Enumeration.PsSession import *
from Vulnerability.LDAPVuln import *
from Vulnerability.UnAuthVuln import *
from Vulnerability.PSVuln import *
from Exploting.Exploit import *
from banner import create_advanced_banner
from colorama import Fore, Style
import argparse

password_policy = 'Password Policy'
kerberos_audit = 'Kerberos Audit'
login_logon_logoff_audit = 'Login/Logon/Logoff Audit'
file_share_audit = 'File share audit'
lockout_policy = 'Lockout Policy'
user_right_assignment_policy = 'User Right Assignment Policy'
default_domain_policy = 'Default Domain Policy'
default_domain_controllers_policy = 'Default Domain Controllers Policy'

DEFAULT_DOMAIN_POLICY = [
    password_policy,
    kerberos_audit,
    login_logon_logoff_audit,
    file_share_audit,
    lockout_policy,
    user_right_assignment_policy,
    default_domain_policy,
    default_domain_controllers_policy
    ]
def gather_information():
    print("\nGather Information:")
    print("1. Get All info")
    print("2. Get Domain Controller")
    print("3. Get Users")
    print("4. Get Computers")
    print("5. Get Groups")
    print("6. Get OUs")
    print("7. Get ACLs")
    print("8. Get All Group Member")
    print("9. Get GPOs")
    print("0. Return to Main Menu")
    choice = input("Enter your choice: ")
    return choice

# def execute_gather_information(choice):
#     if choice == '1':
#         ldap_session.getAllUsers()
#         ldap_session.getAllGroups()
#         ldap_session.getAllComputers()
#         ldap_session.getAllOUs()
#         ldap_session.getAllDCs()
#         ldap_session.getGPOs()

#         # Call the imported functions for "Get All info"
#         print("Getting IP from hostname...")
#         ldap_session.get_ip_from_hostname()

#         print("Getting naming context...")
#         ldap_session.get_naming_context()

#         print("Getting all users...")
#         ldap_session.get_all_users()

#         print("Getting AS REP users...")
#         ldap_session.get_as_rep_user()
#     # Add additional elif blocks for other choices if necessary
#     elif choice == '0':
#         return
#     else:
#         print("Invalid choice. Please select a valid option.")


def scan_vulnerability():
    # Placeholder function for scanning vulnerability
    # print("\nScan Vulnerability feature is under development...")
    ldap_vuln = LDAP_Vuln('AS-REP Roasting', 'High', 'AS-REP Roasting', ldap_session)
    ldap_vuln.scan_vulnerability()

def execute_gather_information(choice, ldap_session: LDAPSession):
    if choice == '1':
        ldap_session.get_naming_context()
        print(Fore.GREEN + '\n[+] Getting all Users' + Style.RESET_ALL)
        ldap_session.getAllUsers()
        print(Fore.GREEN + '[+] Getting all Groups' + Style.RESET_ALL)
        ldap_session.getAllGroups()
        print(Fore.GREEN + '[+] Getting all members of all groups' + Style.RESET_ALL)
        ldap_session.getAllGroupAndMember()
        print(Fore.GREEN + '[+] Getting all Computers' + Style.RESET_ALL)
        ldap_session.getAllComputers()
        print(Fore.GREEN + '[+] Getting all Organizational Units' + Style.RESET_ALL)
        ldap_session.getAllOUs()
        print(Fore.GREEN + '[+] Getting all Domain Controllers' + Style.RESET_ALL)
        ldap_session.getAllDCs()
        print(Fore.GREEN + '[+] Getting all ACLs' + Style.RESET_ALL)
        ldap_session.getACLs()
        print(Fore.GREEN + '[+] Getting Group Policy Objects' + Style.RESET_ALL)
        # ldap_session.get_naming_context()
        GPOS = ldap_session.getGPOs()
        list_gpo_name = []
        for gpo in GPOS:
            list_gpo_name.append(str(gpo.displayName.value))
        ps_session.run_get_gporeport_gpo(list_gpo_name)
        # print(result_ps)
        ps_session.close_session()
        # print(result_ps)
        # ps_session.parseXML(result_ps)
        # ps_session.close_session()

        # Call Get All info function
        print("Getting All Info...")
    elif choice == '2':
        print(Fore.GREEN + '\n[+] Getting all Domain Controllers' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllDCs()
        
    elif choice == '3':
        print(Fore.GREEN + '\n[+] Getting all Users' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllUsers()

    elif choice == '4':
        
        print(Fore.GREEN + '\n[+] Getting all Computers' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllComputers()

    elif choice == '5':
        print(Fore.GREEN + '\n[+] Getting all Groups' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllGroups()

    elif choice == '6':
        print(Fore.GREEN + '\n[+] Getting all Organizational Units' + Style.RESET_ALL)
        ldap_session.get_naming_context()
        ldap_session.getAllOUs()

    elif choice == '7':
        print(Fore.GREEN + '\n[+] Getting all ACLs' + Style.RESET_ALL)
        ldap_session.get_naming_context()
        ldap_session.getACLs()

    elif choice == '8':
        print(Fore.GREEN + '\n[+] Getting all members of all groups' + Style.RESET_ALL)
        
        ldap_session.get_naming_context()
        ldap_session.getAllGroupAndMember()

    elif choice == '9':
        print(Fore.GREEN + '[+] Getting Group Policy Objects' + Style.RESET_ALL)
        ldap_session.get_naming_context()
        GPOS = ldap_session.getGPOs()
        list_gpo_name = []
        for gpo in GPOS:
            list_gpo_name.append(str(gpo.displayName.value))
        ps_session.run_get_gporeport_gpo(list_gpo_name)
        # print(result_ps)
        ps_session.close_session()

        # print("Getting GPOs...")
    elif choice == '0':
        return
    else:
        print("Invalid choice. Please select a valid option.")

def exploit_sub_menu():
    print("\nExploit Technique:")
    print("1. AS-REP Roasting")
    print("0. Return to Main Menu")
    choice = input("Enter your choice: ")
    return choice

def exploit():
    choice = exploit_sub_menu()
    if choice == '1':
        print(Fore.RED + "\n[+] Exploiting AS-REP Roasting..." + Style.RESET_ALL)
        exploiter = Exploit(domain_ip, domain_name, 'AS-REP Roasting')
        exploiter.run()
    
    
def main_menu():
    
    print("\nMain Menu:")
    print("1. Gather Information")
    print("2. Scan Vulnerability")
    print("3. Exploit Vulnerability")
    print("0. Exit")
    choice = input("Enter your choice: ")
    return choice

def execute_main_choice(choice):
    if choice == '1':
        
        while True:
            sub_choice = gather_information()
            if sub_choice == '0':
                break
            execute_gather_information(sub_choice, ldap_session)
    elif choice == '2':
        unauth_vuln = UnAuth_Vuln('Anonymous LDAP', 'High', 'Anonymous LDAP', '', ip='192.168.0.104')
        ldap_vuln = LDAP_Vuln('AS-REP Roasting', 'High', 'AS-REP Roasting', ldap_session)
        ps_vuln = PS_Vuln('AS-REP Roasting', 'High', 'AS-REP Roasting', ldap_session, ps_session)
        # ps_vuln.scan_vulnerability()
        unauth_vuln.scan_vulnerability()
        ldap_vuln.scan_vulnerability()
    
    elif choice == '3':
        exploit()
    elif choice == '0':
        print("Exiting...")
        exit()
    else:
        print("Invalid choice. Please select a valid option.")
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='LDAP Session')
    parser.add_argument('-i', '--ip', help='IP address of the domain controller')
    parser.add_argument('-u', '--username', help='Username to authenticate with')
    parser.add_argument('-p', '--password', help='Password to authenticate with')
    parser.add_argument('-d', '--domain', help='Domain to authenticate with')
    args = parser.parse_args()
    # ldap_session = LDAPSession('192.168.0.104', 'giangtran@capstone.local', 'qwerty1234', 'capstone.local')
    ldap_session = LDAPSession(args.ip, args.username, args.password, args.domain)
    domain_ip = ldap_session.ip
    domain_name = ldap_session.domain
    ps_session = PsSession(domain_ip, 'administrator', 'Pa$$w0rd')
    while True:
        user_choice = main_menu()
        execute_main_choice(user_choice)
    # if not args.ip:
    #     print('[!] Error: No IP address provided')
    #     sys.exit(1)
    # if not args.username:
    #     print('[!] Error: No username provided')
    #     sys.exit(1)
    # if not args.password:
    #     print('[!] Error: No pa+```ssword provided')
    #     sys.exit(1)
    # if not args.domain:
    #     print('[!] Error: No domain provided')
    #     sys.exit(1)
        
    ldap_session = LDAPSession('192.168.0.104', 'giangtran@capstone.local', 'qwerty123')
    domain_ip = ldap_session.ip
    ps_session = PsSession(domain_ip, 'Administrator', 'Pa$$w0rd')
    
    
    # ldap_session.do_bind()
    # print(ldap_session.whoami())
    # ldap_session.unbind()
    print('[+] Getting default naming context')
    print(f'[+] Found: {ldap_session.get_naming_context()}')

    # print(Fore.GREEN + '[+] Getting all users' + Style.RESET_ALL)
    # ldap_session.getAllUsers()
    # print(Fore.GREEN + '[+] Getting all Admin Users' + Style.RESET_ALL)
    # ldap_session.getAdminUsers()
    # print(Fore.GREEN + '[+] Getting AS-REP users' + Style.RESET_ALL)
    # print(ldap_session.get_as_rep_user())
    print(Fore.GREEN + '[+] Getting all groups' + Style.RESET_ALL)
    ldap_session.getAllGroups()
    print(ldap_session.getAllGroups())

    ldap_session.getAllComputers()
    # print(computers)
    # print(Fore.GREEN + '[+] Getting all GPOs' + Style.RESET_ALL)
    # ldap_session.getGPOs()
    print(Fore.GREEN + '[+] Getting all details of GPO ' + password_policy + Style.RESET_ALL)
    result_ps = ps_session.runPsCommand("Get-GPOReport -Name '" + password_policy + "' -ReportType Xml")
    print(result_ps)
    ps_session.parseXML(result_ps)
    ps_session.close_session()
    # print(Fore.GREEN + '[+] Getting all DCs' + Style.RESET_ALL)
    # ldap_session.getAllDCs()
    # print(Fore.GREEN + '[+] Getting all OUs' + Style.RESET_ALL)
    # ldap_session.getAllOUs()
    # print(Fore.GREEN + '[+] Getting all members of group' + Style.RESET_ALL)
    # ldap_session.getGroupMember('Administrators')
    # print(Fore.GREEN + '[+] Getting all members of all groups' + Style.RESET_ALL)
    # ldap_session.getAllGroupAndMember()
    print(Fore.GREEN + '[+] Getting all GPOs' + Style.RESET_ALL)
    ldap_session.getGPOs()
    print(Fore.GREEN + '[+] Getting all DCs' + Style.RESET_ALL)
    ldap_session.getAllDCs()
    print(Fore.GREEN + '[+] Getting all OUs' + Style.RESET_ALL)
    ldap_session.getAllOUs()
    print(Fore.GREEN + '[+] Getting Domain Trust' + Style.RESET_ALL)
    ldap_session.getDomainTrusts()
    # print(ldap_session.do_ldap_query('', filter, ['*'])) 
    # print(ldap_session.is_binded)
    print('[+] Getting all ALCs')
    ldap_session.getACLs()
    
    # ldap_session.do_bind()
    # print(ldap_session.whoami())
    # print(ldap_session.is_binded)
    # ldap_session.unbind()
    # print(ldap_session.whoami())
    # print(ldap_session.is_binded)
    # print(ldap_session.do_ldap_query('DC=example,DC=com', '(objectclass=*)', ['cn', 'sAMAccountName', 'distinguishedName'])) 
    # print(ldap_session.is_binded)