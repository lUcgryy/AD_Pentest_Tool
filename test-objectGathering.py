import ldap3
import argparse
import socket
import sys

UF_ACCOUNTDISABLE = 0x00000002
UF_DONT_REQUIRE_PREAUTH = 0x00400000

class LDAPSession(object):
    def __init__(self, ip='', username='', password='', domain=''):
        if ip:
            self.ip = ip
        else:
            self.get_ip_from_hostname(domain)
        self.username = username
        self.password = password
        self.domain = domain
        
        self.conn = self.connection_init()
        self.domain_base = ''
        self.is_binded = False
        
    def get_ip_from_hostname(self, hostname):
        try:
            dc_ip = socket.gethostbyname(hostname)
        except:
            print('[!] Error: Unable to resolve hostname to IP address')
            
        self.ip = dc_ip
        
    def connection_init(self):
        if not self.ip:
            self.get_ip_from_hostname(self.domain)
        conn = ldap3.Connection(ldap3.Server("ldap://{}".format(self.ip), get_info=ldap3.ALL), user=self.username, password=self.password, auto_bind=True)
        return conn
    
    def unbind(self):
        self.conn.unbind()
        self.is_binded = False
        
    def do_bind(self):
        try:
            self.conn.bind()
            print('[+] Successfully binded to {}'.format(self.ip))
            self.is_binded = True
        except ldap3.core.exceptions.LDAPBindError as e:
            print('[!] Error: {}'.format(e))
            self.is_binded = False
        ##InvalidCredentialsResult: 80090308: LdapErr: DSID-0C09042F, comment: AcceptSecurityContext error, data 52e, v2580
    
    def whoami(self):
        try:
            current_dn = self.conn.extend.standard.who_am_i()
        except ldap3.core.exceptions.LDAPSessionTerminatedByServerError as e:
            print('[!] Error: {}'.format(e))
        
        return current_dn
    
    def get_naming_context(self):
        self.conn.search(search_base = '', search_filter = '(objectclass=*)', search_scope = ldap3.BASE, attributes = ['*'])
        base_dn = self.conn.entries[0].defaultNamingContext.value
        self.domain_base = base_dn
        return base_dn  
    
    def do_ldap_query(self, search_base, search_filter, attributes):
        self.conn.search(search_base, search_filter, attributes=attributes)
        # print(self.conn)
        return self.conn.entries
    
    def getAllUsers(self, attributes=''):
        if not attributes:
            attributes = ['cn', 'sAMAccountName', 'userPrincipalName', 'memberOf', 'whenCreated', 'whenChanged']

        search_filter = '(objectCategory=user)'
        base_dn = self.domain_base
        try:
            rawuser = self.do_ldap_query(base_dn, search_filter, attributes)
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving users")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
        
    def get_as_rep_user(self, attributes=''):
        if not attributes:
            attributes = ['cn', 'sAMAccountName', 'userPrincipalName', 'memberOf', 'whenCreated', 'whenChanged']
        base_dn = self.domain_base
        # print(base_dn)
        search_filter = "(&(UserAccountControl:1.2.840.113556.1.4.803:=%d)" \
                    "(!(UserAccountControl:1.2.840.113556.1.4.803:=%d))(!(objectCategory=computer)))" % \
                        (UF_DONT_REQUIRE_PREAUTH, UF_ACCOUNTDISABLE)
        try:
            rawAsRepUser = self.do_ldap_query(base_dn, search_filter, attributes)
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving users")
            print("[!] {}".format(e))
            sys.exit(1)
        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getAllGroups(self, attributes=''):
        if not attributes:
            attributes = ['distinguishedName', 'cn', 'description', 'whenCreated', 'whenChanged']
        
        search_filter = '(objectCategory=group)'
        base_dn = self.domain_base
        try:
            rawgroup = self.do_ldap_query(base_dn, search_filter, attributes)
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving groups")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getAllComputers(self, attributes=''):
        if not attributes:
            attributes = ['cn', 'dNSHostName', 'operatingSystem', 'operatingSystemVersion', 'operatingSystemServicePack']  
            
        search_filter = '(objectClass=Computer)'
        base_dn = self.domain_base
        
        try:
            rawComputers = self.do_ldap_query(base_dn, search_filter, attributes)
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving computers")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getGPOs (self, attributes=''):
        if not attributes:
            attributes =['displayName', 'gPCFileSysPath']
            
        search_filter = '(objectClass=groupPolicyContainer)'
        base_dn = self.domain_base
        
        try:
            rawGPOs = self.do_ldap_query(base_dn, search_filter, attributes)
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving GPOs")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
    def getAllDCs(self, attributes=''):
        if not attributes:
            attributes = ['dNSHostName', 'operatingSystem', 'operatingSystemVersion']
            
        search_filter = '(&(objectClass=computer)(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=8192))'
        base_dn = self.domain_base
        
        try:
            rawDCs = self.do_ldap_query(base_dn, search_filter, attributes)
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving DCs")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
        
    def getAllOUs(self, attributes=''):
        if not attributes:
            attributes = ['name', 'distinguishedName', 'description', 'whenCreated', 'whenChanged']
            
        search_filter = '(objectClass=organizationalUnit)'
        base_dn = self.domain_base
        
        try:
            rawOUs = self.do_ldap_query(base_dn, search_filter, attributes)
        except ldap3.core.exceptions.LDAPExceptionError as e:
            print("[!] Error retrieving OUs")
            print("[!] {}".format(e))
            sys.exit(1)

        return self.do_ldap_query(base_dn, search_filter, attributes)
    
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='LDAP Session')
    parser.add_argument('-i', '--ip', help='IP address of the domain controller')
    parser.add_argument('-u', '--username', help='Username to authenticate with')
    parser.add_argument('-p', '--password', help='Password to authenticate with')
    parser.add_argument('-d', '--domain', help='Domain to authenticate with')
    args = parser.parse_args()
    
    # if not args.ip:
    #     print('[!] Error: No IP address provided')
    #     sys.exit(1)
    # if not args.username:
    #     print('[!] Error: No username provided')
    #     sys.exit(1)
    # if not args.password:
    #     print('[!] Error: No password provided')
    #     sys.exit(1)
    # if not args.domain:
    #     print('[!] Error: No domain provided')
    #     sys.exit(1)
        
    ldap_session = LDAPSession('192.168.0.104', 'giangtran@capstone.local', 'qwerty123')
    # ldap_session.do_bind()
    # print(ldap_session.whoami())
    # ldap_session.unbind()
    print('[+] Getting default naming context')
    print(f'[+] Found: {ldap_session.get_naming_context()}')

    # print('[+] Getting all users')
    # print(ldap_session.getAllUsers())
    # print('[+] Getting AS-REP users')
    # print(ldap_session.get_as_rep_user())
    # print('[+] Getting all groups')
    # print(ldap_session.getAllGroups())
    # print('[+] Getting all computers')
    # print(ldap_session.getAllComputers())
    # print('[+] Getting all GPOs')
    # print(ldap_session.getGPOs())
    # print('[+] Getting all DCs')
    # print(ldap_session.getAllDCs())
    # print('[+] Getting all OUs')
    # print(ldap_session.getAllOUs())
    # print(ldap_session.do_ldap_query('', filter, ['*'])) 
    # print(ldap_session.is_binded)
    
    # ldap_session.do_bind()
    # print(ldap_session.whoami())
    # print(ldap_session.is_binded)
    # ldap_session.unbind()
    # print(ldap_session.whoami())
    # print(ldap_session.is_binded)
    # print(ldap_session.do_ldap_query('DC=example,DC=com', '(objectclass=*)', ['cn', 'sAMAccountName', 'distinguishedName'])) 
    # print(ldap_session.is_binded)
