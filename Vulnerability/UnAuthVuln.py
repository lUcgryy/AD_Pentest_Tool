from Vulnerability.Vuln import Vuln_Base
from Util.writeHelper import *
from colorama import Fore, Style
import ldap3
import json

class UnAuth_Vuln(Vuln_Base):
    def __init__(self, session, ip):
        super().__init__(session)
        self.ip = ip
        with open('Vulnerability/UnAuthVuln.json') as f:
            self.SIGNATURE_DATABASE = json.load(f)
        
    def scan_vulnerability(self, result_buf):
        for vuln_name, data in self.SIGNATURE_DATABASE.items():
            if vuln_name == 'LDAP Anounymous Bind':
                self.scan_anonymous_LDAP(result_buf, vuln_name, data)
        return result_buf
        
    def scan_anonymous_LDAP(self, result_buf, vuln_name, data):
        try:
            name = data[0]
            severity = data[1]
            description = data[2]
            impact = data[3]
            recommendation = data[4]
            output = [] 
            print(Fore.GREEN + "[+] Scanning for LDAP anonymous bind" + Style.RESET_ALL)
            server = ldap3.Server(self.ip, get_info = ldap3.ALL)
            conn = ldap3.Connection(server)
            if conn.bind():
                print(Fore.RED + "[+] LDAP allow anonymous bind" + Style.RESET_ALL)
                server_info = str(server.info).split('\r\n')
                output = server_info
            else:
                print(Fore.GREEN + "[+] LDAP does not allow anonymous bind" + Style.RESET_ALL)
        except ldap3.core.exceptions.LDAPBindError:
            print(Fore.GREEN + "[+] LDAP does not allow anonymous bind" + Style.RESET_ALL)
            return
        if len(output) > 0:
            result_buf[severity][vuln_name] = {}
            result_buf[severity][vuln_name]['name'] = name
            result_buf[severity][vuln_name]['description'] = description.split('\n')
            result_buf[severity][vuln_name]['impact'] = impact.split('\n')
            result_buf[severity][vuln_name]['recommendation'] = recommendation.split('\n')
            result_buf[severity][vuln_name]['output'] = output
        return result_buf