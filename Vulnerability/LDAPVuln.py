from Vulnerability.Vuln import Vuln_Base
from Util.writeHelper import *
from colorama import Fore, Style
from Enumeration.LDAPSession import *

class LDAP_Vuln(Vuln_Base):
    UF_ACCOUNTDISABLE = 0x00000002
    UF_DONT_REQUIRE_PREAUTH = 0x00400000
    
    SIGNATURE_DATABASE = {
        'AS-REP Roasting': ["(&(UserAccountControl:1.2.840.113556.1.4.803:=%d)" \
                    "(!(UserAccountControl:1.2.840.113556.1.4.803:=%d))(!(objectCategory=computer)))" % \
                        (UF_DONT_REQUIRE_PREAUTH, UF_ACCOUNTDISABLE),"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/asreproast"]
    }

    def __init__(self, name, severity, description, session: LDAPSession):
        super().__init__(name, severity, description, session)
        
    def scan_vulnerability(self):
        self.session.get_naming_context()
        domain_base = self.session.domain_base
        for vuln_name, data in self.SIGNATURE_DATABASE.items():
            signature = data[0]
            ref = data[1]
            result = []
            print(Fore.GREEN + "\n[+] Scanning for %s" % vuln_name + Style.RESET_ALL)
            print(Fore.GREEN + "Reference: %s\n" % ref + Style.RESET_ALL)
            vuln_data = self.session.do_ldap_query(domain_base,signature, attributes=['distinguishedName'])
            if len(vuln_data) > 0:
                for obj in vuln_data:
                    result.append([str(obj.distinguishedName.value)])
            if len(result) > 0:
                printTable(result, header=['distinguishedName'])
                
        print(self.SIGNATURE_DATABASE['AS-REP Roasting'][0])
                
        print(Fore.GREEN + "[+] Scanning completed" + Style.RESET_ALL)