from Vulnerability.Vuln import Vuln_Base
from Util.writeHelper import *
from colorama import Fore, Style
from Enumeration.LDAPSession import *
from Enumeration.ACLs import *

def get_message_prefix_by_type(type):
    if type == 'user':
        return 'User: '
    elif type == 'group':
        return 'Members in group: '
    elif type == 'computer':
        return 'Computer: '
    elif type == 'ou':
        return 'Members in Organizational Unit: '
    elif type == 'gpo':
        return 'Group Policy Object: '
    else:
        return ''

def red_message(message):
    return Fore.RED + message + Style.RESET_ALL
def green_message(message):
    return Fore.GREEN + message + Style.RESET_ALL
class LDAP_Vuln(Vuln_Base):
    UF_ACCOUNTDISABLE = 0x00000002
    UF_DONT_REQUIRE_PREAUTH = 0x00400000
    
    SIGNATURE_DATABASE = {
        'AS-REP Roasting': ["(&(UserAccountControl:1.2.840.113556.1.4.803:=%d)" \
                    "(!(UserAccountControl:1.2.840.113556.1.4.803:=%d))(!(objectCategory=computer)))" % \
                        (UF_DONT_REQUIRE_PREAUTH, UF_ACCOUNTDISABLE),"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/asreproast"],
        'Kerberoasting': ["(&(objectCategory=person)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(servicePrincipalName=*))",
                          "https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/kerberoast"],
        'Unconstrained delegation': ["(&(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))",
                                    "https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/unconstrained-delegation"],
        'Reversible Encryption':  ["(&(objectClass=user)(objectCategory=user)(userAccountControl:1.2.840.113556.1.4.803:=128))",
                                   "https://viperone.gitbook.io/pentest-everything/everything/everything-active-directory/credential-access/modify-authentication-process/reversible-encryption"]
    }
    def __init__(self, name, severity, description, session: LDAPSession):
        super().__init__(name, severity, description, session)
        
    def scan_vulnerability(self):
        self.session.get_naming_context()
        domain_base = self.session.domain_base
        for vuln_name, data in self.SIGNATURE_DATABASE.items():
            signature = data[0]
            ref = data[1]
            result = []
            print(Fore.GREEN + "\n[+] Scanning for %s" % vuln_name + Style.RESET_ALL)
            print(Fore.GREEN + "Reference: %s\n" % ref + Style.RESET_ALL)
            vuln_data = self.session.do_ldap_query(domain_base,signature, attributes=['distinguishedName'])
            if len(vuln_data) > 0:
                for obj in vuln_data:
                    result.append([str(obj.distinguishedName.value)])
            if len(result) > 0:
                printTable(result, header=['distinguishedName'])
        
        self.scan_BAC()
                
        # print(self.SIGNATURE_DATABASE['AS-REP Roasting'][0])
                
        print(Fore.GREEN + "[+] Scanning completed" + Style.RESET_ALL)
        
    def scan_BAC(self):
        print(Fore.GREEN + "\n[+] Scanning for Interesting Right" + Style.RESET_ALL)
        print(Fore.GREEN + "Reference: https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse\n" + Style.RESET_ALL)
        session = self.session
        session.get_naming_context()
        domain_base = session.domain_base
        objecttype_guid_map = session.get_objecttype()
        group_attributes = ['*']
        users = session.getAllUsers(attributes=group_attributes, isPrinted=False)
        groups = session.getAllGroups(attributes=group_attributes, isPrinted=False)
        # computer_attributes = ['ntSecurityDescriptor', 'distinguishedName']
        computers = session.getAllComputers(attributes=group_attributes, isPrinted=False)
        ous = session.getAllOUs(attributes=group_attributes, isPrinted=False)
        gpos = session.getGPOs(attributes=group_attributes, isPrinted=False)
        sid_name = session.get_sid_name_dict()
        acls = {}
        object_type = ['user', 'group', 'computer', 'ou', 'gpo']
        interesting_right = {
            'GenericAll': "Full rights to the object (add users to a group or reset user's password)",
            'GenericWrite': "Update object's attributes (i.e logon script)",
            'WriteOwner': "Change object owner to attacker controlled user take over the object",
            'WriteDACL': "Modify object's ACEs and give attacker full control right over the object",
            'AllExtendedRights': "Ability to add user to a group or reset password",
            'ForceChangePassword': "Ability to change user's password",
            'AddSelf': "Ability to add yourself to a group"
        }
        for type in object_type:
            acls[type] = {}
        for user in users:
            ntSecurityDescriptor = user.ntSecurityDescriptor.value
            acls['user'][user.cn.value] = parse_binary_acl('user', ntSecurityDescriptor, objecttype_guid_map, sid_name)
        for group in groups:
            ntSecurityDescriptor = group.ntSecurityDescriptor.value
            acls['group'][group.cn.value] = parse_binary_acl('group', ntSecurityDescriptor, objecttype_guid_map, sid_name)
        for computer in computers:
            ntSecurityDescriptor = computer.ntSecurityDescriptor.value
            acls['computer'][computer.cn.value] = parse_binary_acl('computer', ntSecurityDescriptor, objecttype_guid_map, sid_name)
        for ou in ous:
            ntSecurityDescriptor = ou.ntSecurityDescriptor.value
            acls['ou'][ou.name.value] = parse_binary_acl('ou', ntSecurityDescriptor, objecttype_guid_map, sid_name)
        for gpo in gpos:
            ntSecurityDescriptor = gpo.ntSecurityDescriptor.value
            acls['gpo'][gpo.displayName.value] = parse_binary_acl('gpo', ntSecurityDescriptor, objecttype_guid_map, sid_name)
            
        for type in object_type:
            for owner, its_acl in acls[type].items():
                # print(acl)
                empty_acl = []
                for key in its_acl.keys():
                    if len(its_acl[key]) == 0:
                        empty_acl.append(key)
                # print(empty_acl)
                for key in empty_acl:
                    del its_acl[key]
        
        for i_right, description in interesting_right.items():
            print(Fore.GREEN + "\n[+] Scanning for %s permission: %s\n" % (i_right, description) + Style.RESET_ALL)
            for type in object_type:
                for owner, its_acl in acls[type].items():
                    for target, rights in its_acl.items():
                        if i_right in rights:
                            print(Fore.GREEN + f"[+] {get_message_prefix_by_type(type)}{red_message(owner)}{Fore.GREEN} has {Style.RESET_ALL}{red_message(i_right)}{Fore.GREEN} on {Style.RESET_ALL}{red_message(target)}"  + Style.RESET_ALL)
    
