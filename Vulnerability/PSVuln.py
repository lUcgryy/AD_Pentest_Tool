from Vulnerability.Vuln import Vuln_Base
from Enumeration.Util.writeHelper import *
from colorama import Fore, Style
from Enumeration.LDAPSession import *
from Enumeration.PsSession import *
import re
import json

class PS_Vuln(Vuln_Base):
    def __init__(self, ldap_session: LDAPSession = '', ps_session: PsSession = ''):
        self.ldap_session = ldap_session
        self.ps_session = ps_session
        with open('Vulnerability/PSVuln.json') as f:
            self.SIGNATURE_DATABASE = json.load(f)
    
    def scan_vulnerability(self, result_buf):
        self.ldap_session.get_naming_context()
        domain_base = self.ldap_session.domain_base
        GPOs = self.ldap_session.getGPOs(isPrinted=False)
        list_gpo_name = []
        pol_detail = {}
        print(Fore.GREEN + "\n[+] Scanning Policy" + Style.RESET_ALL)
        for gpo in GPOs:
            list_gpo_name.append(str(gpo.displayName.value))
        
        for policy_name in list_gpo_name:
            detail = self.ps_session.run_get_gporeport_gpo_by_name(policy_name, isPrinted=False)
            pol_detail[policy_name] = detail
        
        for vuln_name, data in self.SIGNATURE_DATABASE.items():
            if vuln_name == 'Weak Password':
                result_buf = self.eval_password_policy(pol_detail, result_buf, vuln_name, data)
            elif vuln_name == 'Weak Lockout':
                result_buf = self.eval_lockout_policy(pol_detail, result_buf, vuln_name, data)
            elif vuln_name == 'Dangerous Priviledge':
                result_buf = self.scan_user_right(result_buf, vuln_name, data)  
        # self.eval_policy()
        return result_buf
    
    def eval_password_policy(self, pol_detail, result_buf, vuln_name, data):
        password_policy_standard = {
            # 'PasswordHistorySize': 24,
            'MaximumPasswordAge': 90,
            'MinimumPasswordAge': 1,
            'MinimumPasswordLength': 8,
            'PasswordComplexity': 'true',
            'ClearTextPassword': 'false'
        }
        vuln = False
        name = data[0]
        severity = data[1]
        description = data[2]
        impact = data[3]
        recommendation = data[4]
        output = [] 
        print(Fore.GREEN + "\n[+] Evaluating Password Policy" + Style.RESET_ALL)
        for policy_name, details in pol_detail.items():
            result = []
            # Attribute | Value | Evaluate
            for detail in details:
                # print(detail)
                attribute = detail[0]
                # print(attribute)
                # print(password_policy_standard.keys())
                # print(attribute in password_policy_standard.keys())
                if attribute in password_policy_standard.keys():
                    value = detail[1]
                    # print(value)
                    if attribute == 'PasswordComplexity' or attribute == 'ClearTextPassword':
                        if value == password_policy_standard[attribute]:
                            result.append([attribute, value, 'OK'])
                        else:
                            vuln = True
                            result.append([attribute, value, 'Weak'])
                    elif attribute == 'MaximumPasswordAge':
                        if int(value) > password_policy_standard[attribute]:
                            vuln = True
                            result.append([attribute, value, 'Weak'])

                        else:
                            result.append([attribute, value, 'OK'])
                    else:
                        if int(value) < password_policy_standard[attribute]:
                            vuln = True
                            result.append([attribute, value, 'Weak'])
                        else:
                            result.append([attribute, value, 'OK'])
            # print(res)
            if len(result) > 0:
                print(Fore.GREEN + "\n[+] " + policy_name + Style.RESET_ALL)
                printTable(result, header=['Attribute', 'Value', 'Evaluate'])
                if vuln:
                    output.append(f'[+] {policy_name}')
                    mes_data = table(result, header=['Attribute', 'Value', 'Evaluate']).split('\n')
                    for mes in mes_data:
                        output.append(mes)
                    result_buf[severity][vuln_name] = {}
                    result_buf[severity][vuln_name]['name'] = name
                    result_buf[severity][vuln_name]['description'] = description.split('\n')
                    result_buf[severity][vuln_name]['impact'] = impact.split('\n')
                    result_buf[severity][vuln_name]['recommendation'] = recommendation.split('\n')
                    result_buf[severity][vuln_name]['output'] = output
        return result_buf
        
    def eval_lockout_policy(self, pol_detail, result_buf, vuln_name, data):
        lockout_policy_standard = {
            'LockoutDuration': 15,
            'LockoutBadCount': 10,
            'ResetLockoutCount': 15
        }
        name = data[0]
        severity = data[1]
        description = data[2]
        impact = data[3]
        recommendation = data[4]
        output = [] 
        vuln = False
        
        print(Fore.GREEN + "\n[+] Evaluating Lockout Policy" + Style.RESET_ALL)
        for policy_name, details in pol_detail.items():
            result = []
            # Attribute | Value | Evaluate
            for detail in details:
                attribute = detail[0]
                if attribute in lockout_policy_standard.keys():
                    value = detail[1]
                    if attribute == 'LockoutBadCount':
                        if int(value) == 0 or int(value) > lockout_policy_standard[attribute]:
                            result.append([attribute, value, 'Weak'])
                            vuln = True
                        else:
                            result.append([attribute, value, 'OK'])
                    else:
                        if int(value) < lockout_policy_standard[attribute]:
                            result.append([attribute, value, 'Weak'])
                            vuln = True
                        else:
                            result.append([attribute, value, 'OK'])
            if len(result) > 0:
                print(Fore.GREEN + "\n[+] " + policy_name + Style.RESET_ALL)
                printTable(result, header=['Attribute', 'Value', 'Evaluate'])
                if vuln:
                    output.append(f'[+] {policy_name}')
                    mes_data = table(result, header=['Attribute', 'Value', 'Evaluate']).split('\n')
                    for mes in mes_data:
                        output.append(mes)
                    result_buf[severity][vuln_name] = {}
                    result_buf[severity][vuln_name]['name'] = name
                    result_buf[severity][vuln_name]['description'] = description.split('\n')
                    result_buf[severity][vuln_name]['impact'] = impact.split('\n')
                    result_buf[severity][vuln_name]['recommendation'] = recommendation.split('\n')
                    result_buf[severity][vuln_name]['output'] = output
        return result_buf

        
    def scan_user_right(self, result_buf, vuln_name, data):
        interesting_user_right = {
            'SeImpersonatePrivilege': 
                [
                    'Create a process under the security context of another user', 
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#seimpersonateprivilege'
                ],
            'SeAssignPrimaryPrivilege': 
                [
                    'Create a process under the security context of another user',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#seassignprimaryprivilege'
                ],
            'SeCreateTokenPrivilege': 
                [
                    'Create arbitrary token including local admin rights',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#secreatetokenprivilege'
                ],
            'SeTcbPrivilege': 
                [
                    'Manipulate tokens to have local admin rights included.',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#setcbprivilege'
                ],
            'SeBackupPrivilege': 
                [
                    'Grant all read access control to any file',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#sebackupprivilege'
                ],
            'SeRestorePrivilege': 
                [
                    'Write access to any system file',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#sebackupprivilege'
                ],
            'SeLoadDriverPrivilege': 
                [
                    'Allows to load and unload device drivers',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#seloaddriverprivilege'
                ],
            'SeTakeOwnershipPrivilege': 
                [
                    'Allows a process to assume ownership of an object',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#setakeownershipprivilege'
                ],
            'SeInteractiveLogonRight': ['Allows a user to connect locally on the computer'],
            'SeRemoteInteractiveLogonRight': ['Allow logon through Terminal Services']
        }
        name = data[0]
        severity = data[1]
        description = data[2]
        impact = data[3]
        recommendation = data[4]
        reference = data[5]
        output = [] 
        print(Fore.GREEN + "\n[+] Scanning for this user's interesting user rights" + Style.RESET_ALL)
        raw_priv = self.ps_session.runPsCommand('whoami /priv')
        priv_data = raw_priv.split('\r\n')[6:-1]
        for priv in priv_data:
            priv = re.split('\s{2,}', priv)[0]
            if priv in interesting_user_right.keys():
                print(Fore.RED + "\n[+] This user has " + priv + Style.RESET_ALL)
                print(Fore.GREEN + "[+] Description: " + Style.RESET_ALL + interesting_user_right[priv][0])
                print(Fore.GREEN + "[+] Reference: " + Style.RESET_ALL + interesting_user_right[priv][1])
                output.append(f'[+] This user has {priv}')
        
        if len(output) > 0:
            result_buf[severity][vuln_name] = {}
            result_buf[severity][vuln_name]['name'] = name
            result_buf[severity][vuln_name]['description'] = description.split('\n')
            result_buf[severity][vuln_name]['impact'] = impact.split('\n')
            result_buf[severity][vuln_name]['recommendation'] = recommendation.split('\n')
            result_buf[severity][vuln_name]['reference'] = reference.split('\n')
            result_buf[severity][vuln_name]['output'] = output
            
        return result_buf
                                                                       

