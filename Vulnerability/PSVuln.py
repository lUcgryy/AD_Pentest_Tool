from Vulnerability.Vuln import Vuln_Base
from Enumeration.Util.writeHelper import *
from colorama import Fore, Style
from Enumeration.LDAPSession import *
from Enumeration.PsSession import *
import re

class PS_Vuln(Vuln_Base):
    def __init__(self, name='', severity='', description='', ldap_session: LDAPSession = '', ps_session: PsSession = ''):
        self.name = name
        self.severity = severity
        self.description = description
        self.ldap_session = ldap_session
        self.ps_session = ps_session
    
    def scan_vulnerability(self):
        self.eval_policy()
        
    def eval_policy(self):
        password_policy_standard = {
            # 'PasswordHistorySize': 24,
            'MaximumPasswordAge': 90,
            'MinimumPasswordAge': 1,
            'MinimumPasswordLength': 14,
            'PasswordComplexity': 'true',
            'ClearTextPassword': 'false'
        }
        
        lockout_policy_standard = {
            'LockoutDuration': 15,
            'LockoutBadCount': 10,
            'ResetLockoutCount': 15
        }
        
        interesting_user_right = {
            'SeImpersonatePrivilege': 
                [
                    'Create a process under the security context of another user', 
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#seimpersonateprivilege'
                ],
            'SeAssignPrimaryPrivilege': 
                [
                    'Create a process under the security context of another user',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#seassignprimaryprivilege'
                ],
            'SeCreateTokenPrivilege': 
                [
                    'Create arbitrary token including local admin rights',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#secreatetokenprivilege'
                ],
            'SeTcbPrivilege': 
                [
                    'Manipulate tokens to have local admin rights included.',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#setcbprivilege'
                ],
            'SeBackupPrivilege': 
                [
                    'Grant all read access control to any file',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#sebackupprivilege'
                ],
            'SeRestorePrivilege': 
                [
                    'Write access to any system file',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#sebackupprivilege'
                ],
            'SeLoadDriverPrivilege': 
                [
                    'Allows to load and unload device drivers',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#seloaddriverprivilege'
                ],
            'SeTakeOwnershipPrivilege': 
                [
                    'Allows a process to assume ownership of an object',
                    'https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#setakeownershipprivilege'
                ],
            'SeInteractiveLogonRight': ['Allows a user to connect locally on the computer'],
            'SeRemoteInteractiveLogonRight': ['Allow logon through Terminal Services']
        }
        
        exclude_users = 'NT AUTHORITY'
        self.ldap_session.get_naming_context()
        domain_base = self.ldap_session.domain_base
        GPOs = self.ldap_session.getGPOs(isPrinted=False)
        list_gpo_name = []
        pol_detail = {}
        for gpo in GPOs:
            list_gpo_name.append(str(gpo.displayName.value))
        
        # for policy_name in list_gpo_name:
        #     detail = self.ps_session.run_get_gporeport_gpo_by_name(policy_name, isPrinted=False)
        #     pol_detail[policy_name] = detail

        # print(pol_detail)
        pol_detail = {'Default Domain Policy': [['ClearTextPassword', 'false', 'None'], ['LockoutBadCount', '0', 'None'], ['MaximumPasswordAge', '42', 'None'], ['MinimumPasswordAge', '1', 'None'], ['MinimumPasswordLength', '0', 'None'], ['PasswordComplexity', 'false', 'None'], ['PasswordHistorySize', '24', 'None'], ['MaxClockSkew', '5', 'None'], ['MaxRenewAge', '7', 'None'], ['MaxServiceAge', '600', 'None'], ['MaxTicketAge', '10', 'None'], ['TicketValidateClient', 'true', 'None'], ['Network security: Do not store LAN Manager hash value on next password change', 'true', 'None'], ['ForceLogoffWhenHourExpire', '0', 'None'], ['LSAAnonymousNameLookup', '0', 'None']], 'Default Domain Controllers Policy': [['SeAssignPrimaryTokenPrivilege', 'Member: NT AUTHORITY\\\\NETWORK SERVICE, NT AUTHORITY\\\\LOCAL SERVICE', 'None'], ['SeAuditPrivilege', 'Member: NT AUTHORITY\\\\NETWORK SERVICE, NT AUTHORITY\\\\LOCAL SERVICE', 'None'], ['SeBackupPrivilege', 'Member: BUILTIN\\\\Server Operators, BUILTIN\\\\Backup Operators, BUILTIN\\\\Administrators', 'None'], ['SeBatchLogonRight', 'Member: BUILTIN\\\\Performance Log Users, BUILTIN\\\\Backup Operators, BUILTIN\\\\Administrators', 'None'], ['SeChangeNotifyPrivilege', 'Member: BUILTIN\\\\Pre-Windows 2000 Compatible Access, NT AUTHORITY\\\\Authenticated Users, BUILTIN\\\\Administrators, NT AUTHORITY\\\\NETWORK SERVICE, NT AUTHORITY\\\\LOCAL SERVICE, Everyone', 'None'], ['SeCreatePagefilePrivilege', 'Member: BUILTIN\\\\Administrators', 'None'], ['SeDebugPrivilege', 'Member: BUILTIN\\\\Administrators', 'None'], ['SeEnableDelegationPrivilege', 'Member: BUILTIN\\\\Administrators', 'None'], ['SeIncreaseBasePriorityPrivilege', 'Member: Window Manager\\\\Window Manager Group, BUILTIN\\\\Administrators', 'None'], ['SeIncreaseQuotaPrivilege', 'Member: BUILTIN\\\\Administrators, NT AUTHORITY\\\\NETWORK SERVICE, NT AUTHORITY\\\\LOCAL SERVICE', 'None'], ['SeInteractiveLogonRight', 'Member: NT AUTHORITY\\\\ENTERPRISE DOMAIN CONTROLLERS, BUILTIN\\\\Print Operators, BUILTIN\\\\Server Operators, BUILTIN\\\\Account Operators, BUILTIN\\\\Backup Operators, BUILTIN\\\\Administrators', 'None'], ['SeLoadDriverPrivilege', 'Member: BUILTIN\\\\Print Operators, BUILTIN\\\\Administrators', 'None'], ['SeMachineAccountPrivilege', 'Member: NT AUTHORITY\\\\Authenticated Users', 'None'], ['SeNetworkLogonRight', 'Member: BUILTIN\\\\Pre-Windows 2000 Compatible Access, NT AUTHORITY\\\\ENTERPRISE DOMAIN CONTROLLERS, NT AUTHORITY\\\\Authenticated Users, BUILTIN\\\\Administrators, Everyone', 'None'], ['SeProfileSingleProcessPrivilege', 'Member: BUILTIN\\\\Administrators', 'None'], ['SeRemoteShutdownPrivilege', 'Member: BUILTIN\\\\Server Operators, BUILTIN\\\\Administrators', 'None'], ['SeRestorePrivilege', 'Member: BUILTIN\\\\Server Operators, BUILTIN\\\\Backup Operators, BUILTIN\\\\Administrators', 'None'], ['SeSecurityPrivilege', 'Member: BUILTIN\\\\Administrators', 'None'], ['SeShutdownPrivilege', 'Member: BUILTIN\\\\Print Operators, BUILTIN\\\\Server Operators, BUILTIN\\\\Backup Operators, BUILTIN\\\\Administrators', 'None'], ['SeSystemEnvironmentPrivilege', 'Member: BUILTIN\\\\Administrators', 'None'], ['SeSystemProfilePrivilege', 'Member: NT SERVICE\\\\WdiServiceHost, BUILTIN\\\\Administrators', 'None'], ['SeSystemTimePrivilege', 'Member: BUILTIN\\\\Server Operators, BUILTIN\\\\Administrators, NT AUTHORITY\\\\LOCAL SERVICE', 'None'], ['SeTakeOwnershipPrivilege', 'Member: BUILTIN\\\\Administrators', 'None'], ['SeUndockPrivilege', 'Member: BUILTIN\\\\Administrators', 'None'], ['Microsoft network server: Digitally sign communications (if client agrees)', 'true', 'None'], ['Microsoft network server: Digitally sign communications (always)', 'true', 'None'], ['Domain member: Digitally encrypt or sign secure channel data (always)', 'true', 'None'], ['Domain controller: LDAP server signing requirements', 'None', 'None']], 'Password Policy': [['ClearTextPassword', 'true', 'None'], ['MaximumPasswordAge', '999', 'None'], ['MinimumPasswordAge', '30', 'None'], ['MinimumPasswordLength', '0', 'None'], ['PasswordComplexity', 'false', 'None'], ['PasswordHistorySize', '24', 'None'], ['Relax minimum password length limits', 'false', 'None']], 'Login/Logon/Logoff Audit': [['AuditAccountLogon', 'SuccessAttempts (true)', 'FailureAttempts (true)'], ['AuditLogonEvents', 'SuccessAttempts (true)', 'FailureAttempts (true)'], ['Audit Credential Validation', 'Audit Success and Failure', 'None'], ['Audit Other Account Logon Events', 'Audit Success and Failure', 'None'], ['Audit Logoff', 'Audit Success and Failure', 'None'], ['Audit Logon', 'Audit Success and Failure', 'None'], ['Audit Other Logon/Logoff Events', 'Audit Success and Failure', 'None'], ['Audit Special Logon', 'Audit Success and Failure', 'None']], 'File share audit': [['Audit File Share', 'Audit Success and Failure', 'None']], 'Kerberos audit': [['MaxClockSkew', '600', 'None'], ['MaxRenewAge', '10', 'None'], ['MaxServiceAge', '2400', 'None'], ['MaxTicketAge', '40', 'None'], ['TicketValidateClient', 'false', 'None'], ['Audit Kerberos Authentication Service', 'Audit Success and Failure', 'None'], ['Audit Kerberos Service Ticket Operations', 'Audit Success and Failure', 'None']], 'Custom Policy': [], 'Lockout Policy': [['LockoutBadCount', '999', 'None'], ['LockoutDuration', '1', 'None'], ['ResetLockoutCount', '1', 'None']], 'User Right Assignment Policy': [['SeInteractiveLogonRight', 'Member: CAPSTONE\\\\vudiep, CAPSTONE\\\\tuantran, CAPSTONE\\\\giangtran, CAPSTONE\\\\dungnguyen, CAPSTONE\\\\administrator, BUILTIN\\\\Administrators', 'None'], ['SeNetworkLogonRight', 'Member: Everyone, CAPSTONE\\\\vudiep, CAPSTONE\\\\tuantran, CAPSTONE\\\\giangtran, CAPSTONE\\\\dungnguyen, CAPSTONE\\\\administrator', 'None'], ['SeRemoteInteractiveLogonRight', 'Member: CAPSTONE\\\\vudiep, CAPSTONE\\\\tuantran, CAPSTONE\\\\giangtran, CAPSTONE\\\\dungnguyen, CAPSTONE\\\\administrator', 'None']]}
        
        print(Fore.GREEN + "\n[+] Evaluating Password Policy" + Style.RESET_ALL)
        for policy_name, details in pol_detail.items():
            result = []
            # Attribute | Value | Evaluate
            for detail in details:
                # print(detail)
                attribute = detail[0]
                # print(attribute)
                # print(password_policy_standard.keys())
                # print(attribute in password_policy_standard.keys())
                if attribute in password_policy_standard.keys():
                    value = detail[1]
                    # print(value)
                    if attribute == 'PasswordComplexity' or attribute == 'ClearTextPassword':
                        if value == password_policy_standard[attribute]:
                            result.append([attribute, value, 'OK'])
                        else:
                            result.append([attribute, value, 'Weak'])
                    elif attribute == 'MaximumPasswordAge':
                        if int(value) > password_policy_standard[attribute]:
                            result.append([attribute, value, 'Weak'])

                        else:
                            result.append([attribute, value, 'OK'])
                    else:
                        if int(value) < password_policy_standard[attribute]:
                            result.append([attribute, value, 'Weak'])
                        else:
                            result.append([attribute, value, 'OK'])
            # print(res)
            if len(result) > 0:
                print(Fore.GREEN + "\n[+] " + policy_name + Style.RESET_ALL)
                printTable(result, header=['Attribure', 'Value', 'Evaluate'])
                        
        print(Fore.GREEN + "\n[+] Evaluating Lockout Policy" + Style.RESET_ALL)
        for policy_name, details in pol_detail.items():
            result = []
            # Attribute | Value | Evaluate
            for detail in details:
                attribute = detail[0]
                if attribute in lockout_policy_standard.keys():
                    value = detail[1]
                    if attribute == 'LockoutBadCount':
                        if int(value) == 0 or int(value) > lockout_policy_standard[attribute]:
                            result.append([attribute, value, 'Weak'])
                        else:
                            result.append([attribute, value, 'OK'])
                    else:
                        if int(value) < lockout_policy_standard[attribute]:
                            result.append([attribute, value, 'Weak'])
                        else:
                            result.append([attribute, value, 'OK'])
            if len(result) > 0:
                print(Fore.GREEN + "\n[+] " + policy_name + Style.RESET_ALL)
                printTable(result, header=['Attribure', 'Value', 'Evaluate'])
                
        print(Fore.GREEN + "\n[+] Scanning for this user's intersesting user rights" + Style.RESET_ALL)
        raw_priv = self.ps_session.runPsCommand('whoami /priv')
        priv_data = raw_priv.split('\r\n')[6:-1]
        for priv in priv_data:
            priv = re.split('\s{2,}', priv)[0]
            if priv in interesting_user_right.keys():
                print(Fore.RED + "\n[+] This user has " + priv + Style.RESET_ALL)
                print(Fore.GREEN + "[+] Description: " + Style.RESET_ALL + interesting_user_right[priv][0])
                print(Fore.GREEN + "[+] Reference: " + Style.RESET_ALL + interesting_user_right[priv][1])
            
                                                                       

