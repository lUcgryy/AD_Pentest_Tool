{
    "Weak Password": [
        "Weak Password Policy Configuration",
        "Low",
        "A weak password policy configuration in Active Directory refers to a situation where the password policy settings are not appropriately configured to enforce strong passwords for user accounts.",
        "A weak password policy configuration can lead to several vulnerabilities and security risks, including:\n\nPassword Guessing: Weak passwords are easier to guess or crack using automated tools. Attackers can exploit this vulnerability to gain unauthorized access to user accounts and potentially compromise sensitive data or systems.\n\nBrute-Force Attacks: With a weak password policy, attackers can launch brute-force attacks, systematically trying every possible password combination until they find the correct one. This can be successful if users have weak passwords that are easily guessable.\n\nCredential Stuffing: Weak passwords often get reused across multiple accounts by users. Attackers can exploit this by using stolen credentials from one service to gain unauthorized access to other accounts, including those in Active Directory.\n\nDictionary Attacks: Weak password policies may allow the use of common dictionary words as passwords. Attackers can use precomputed tables of hashed dictionary words, known as rainbow tables, to quickly determine the passwords associated with the hashes.\n\nIncreased Risk of Account Compromise: When user accounts have weak passwords, it becomes easier for attackers to compromise them. Once an attacker gains access to an account, they can potentially escalate their privileges, access sensitive information, or perform malicious activities within the network.",
        "It is recommended to enforce a strong password policy. This includes setting requirements such as minimum password length, complexity rules (e.g., a combination of uppercase and lowercase letters, numbers, and special characters), and regular password expiration policies. Here is the recommended configuration for a strong password policy in Active Directory:\n\n- Minimum Password Length: At least 8 characters\n- Complexity Requirements: Include a combination of uppercase and lowercase letters, numbers, and special characters\n- Password Expiration: Set passwords to expire every 90 days\nAccount Lockout Policy: Configure account lockout settings to prevent brute-force attacks\n- Password History: Enforce a password history policy to prevent users from reusing old passwords\n- Clear Text Passwords: Disable the storage of reversible encryption passwords in Active Directory"
    ],
    "Weak Lockout": [
        "Weak Account Lockout Policy Configuration Enable brute-force attack",
        "Medium",
        "A weak account lockout policy configuration in Active Directory refers to a situation where the account lockout settings are not appropriately configured to prevent brute-force attacks against user accounts.",
        "An attacker could perform brute-force the victim's password if he could get the victim's username.",
        "It is recommended to configure a strong account lockout policy to prevent brute-force attacks against user accounts. Here is the recommended configuration for a strong account lockout policy in Active Directory:\n\n- Account Lockout Threshold: Set the account lockout threshold to a reasonable number of failed login attempts (e.g., 5 attempts)\n- Account Lockout Duration: Configure the account lockout duration to a reasonable period (e.g., 30 minutes)\n- Reset Account Lockout Counter After: Set the counter to reset after a reasonable period (e.g., 30 minutes)"
    ],
    "Dangerous Priviledge": [
        "Dangerous Windows Access Token Privileges Enabled for this user account allowed local privilege escalation",
        "High",
        "Dangerous Windows access token privileges enabled for a user account in Active Directory refer to the presence of sensitive privileges that can be exploited by attackers to escalate their privileges on a system or network. Each user logged onto the system holds an access token with security information for that logon session. The system creates an access token when the user logs on. Every process executed on behalf of the user has a copy of the access token. The token identifies the user, the user's groups, and the user's privileges. Some of the dangerous Windows access token privileges include:\n\n- SeImpersonatePrivilege\\SeAssignPrimaryPrivilege: Create a process under the security context of another user\n\n- SeCreateTokenPrivilege: Create arbitrary token including local admin rights\n\n- SeDebugPrivilege: Allows a user to debug any process on the system, including system processes, which can lead to unauthorized access to sensitive information.\n- SeTcbPrivilege: Manipulate tokens to have local admin rights included.\n- SeBackupPrivilege: Grant all read access control to any file\n\n- SeRestorePrivilege: Write access to any system file.\n\n- SeLoadDriverPrivilege: Allows to load and unload device drivers\n\n- SeTakeOwnershipPrivilege: Allows a process to assume ownership of an object.\n\n- SeInteractiveLogonRight: Allows a user to connect locally on the computer.\n\n- SeRemoteInteractiveLogonRight: Allow logon through Terminal Services",
        "The attacker can exploit these privileges to perform local privilege escalation, gain unauthorized access to sensitive information, execute malicious code, or perform other malicious activities on the system or network.",
        "It is recommended to review and remove any unnecessary or dangerous Windows access token privileges from user accounts in Active Directory. Only assign privileges that are required for the user's role and responsibilities. Regularly review and audit user privileges to ensure that they are appropriate and do not pose a security risk.",
        "https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/access-tokens"
    ]
}